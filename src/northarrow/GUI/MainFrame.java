/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package northarrow.GUI;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JRadioButton;
import javax.swing.RowFilter;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import keeptoo.Drag;
import mdlaf.MaterialLookAndFeel;
import northarrow.DBManager;
import northarrow.LatestMark;
import northarrow.Student;
import northarrow.TermMark;
import northarrow.YearMark;
import org.jfree.chart.*;
import org.jfree.data.category.*;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;

/**
 *
 * @author Richard
 */
public class MainFrame extends javax.swing.JFrame
{

    /**
     * Creates new form MainFrame
     */
    private DBManager db = new DBManager();//instantiate DBMG to use its methods
    private String user = "";
    private JFreeChart chart;//instantiate the JfreeChart to display a graph
    private boolean personal = true, isMAT = false, isAQL = false, isNoMatter = true;

    //some switches
    public MainFrame()
    {
        try//impletation of material ui look and feel jar file
        {
            UIManager.setLookAndFeel(new MaterialLookAndFeel());
        } catch (UnsupportedLookAndFeelException e)
        {
            e.printStackTrace();
        }
        initComponents();
        setBackground(new Color(1.0f, 1.0f, 1.0f, 0.0f));//set Background tranparent
        setLocationRelativeTo(null);//set frame in the centre of screen
        setCursor(GUIManager.cursor());//set cutom cursor
    }

    public MainFrame(String inUsername) throws SQLException
    {
        //overloaded to get the userId for thier data
        try//impletation of material ui look and feel jar file
        {
            UIManager.setLookAndFeel(new MaterialLookAndFeel());
        } catch (UnsupportedLookAndFeelException e)
        {
            e.printStackTrace();
        }
        initComponents();
        setBackground(new Color(1.0f, 1.0f, 1.0f, 0.0f));//set Background tranparent
        setLocationRelativeTo(null);//set frame in the centre of screen
        setCursor(GUIManager.cursor());//set custom cuesor
        user = inUsername;// NB for this particular user, almost all data validation depends on the username coming from the login frame
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btngRace = new javax.swing.ButtonGroup();
        btngProgress = new javax.swing.ButtonGroup();
        btngSubject = new javax.swing.ButtonGroup();
        jpParent = new javax.swing.JPanel();
        Logo = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        minimize = new javax.swing.JButton();
        close = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        DragBar = new javax.swing.JLabel();
        jpConfirmLogOut = new javax.swing.JPanel();
        Close = new javax.swing.JLabel();
        confirm = new javax.swing.JButton();
        decor = new javax.swing.JLabel();
        minorBG = new javax.swing.JLabel();
        jpStudent = new javax.swing.JPanel();
        txfHomeL = new javax.swing.JFormattedTextField();
        txfAddL = new javax.swing.JFormattedTextField();
        txfMath = new javax.swing.JFormattedTextField();
        txfCh1 = new javax.swing.JFormattedTextField();
        txfCh2 = new javax.swing.JFormattedTextField();
        txfCh3 = new javax.swing.JFormattedTextField();
        jSeparator = new javax.swing.JSeparator();
        lbStudentTitle = new javax.swing.JLabel();
        studenTtitleIcon = new javax.swing.JLabel();
        lbRace = new javax.swing.JLabel();
        lbHomeL = new javax.swing.JLabel();
        lbAddL = new javax.swing.JLabel();
        lbCh3 = new javax.swing.JLabel();
        lbMath = new javax.swing.JLabel();
        lbCh1 = new javax.swing.JLabel();
        lbCh2 = new javax.swing.JLabel();
        lbGrade = new javax.swing.JLabel();
        lbTerm = new javax.swing.JLabel();
        studentHelp = new javax.swing.JButton();
        jcHomeL = new javax.swing.JComboBox<>();
        jcAddL = new javax.swing.JComboBox<>();
        jcMath = new javax.swing.JComboBox<>();
        jcCh1 = new javax.swing.JComboBox<>();
        jcCh2 = new javax.swing.JComboBox<>();
        jcCh3 = new javax.swing.JComboBox<>();
        jcGrade = new javax.swing.JComboBox<>();
        jcTerm = new javax.swing.JComboBox<>();
        jrWhite = new javax.swing.JRadioButton();
        jrBlack = new javax.swing.JRadioButton();
        jrIndian = new javax.swing.JRadioButton();
        jrColoured = new javax.swing.JRadioButton();
        jrAsian = new javax.swing.JRadioButton();
        jtMarks = new javax.swing.JToggleButton();
        btnSave = new javax.swing.JButton();
        btnCheck = new javax.swing.JButton();
        percCh3 = new javax.swing.JLabel();
        percHomeL = new javax.swing.JLabel();
        percAddL = new javax.swing.JLabel();
        percMath = new javax.swing.JLabel();
        percCh1 = new javax.swing.JLabel();
        percCh2 = new javax.swing.JLabel();
        lbMoreInfo = new javax.swing.JLabel();
        lbMAT = new javax.swing.JLabel();
        lbAL = new javax.swing.JLabel();
        lbQL = new javax.swing.JLabel();
        lbNBT = new javax.swing.JLabel();
        lbSubjects = new javax.swing.JLabel();
        txfMAT = new javax.swing.JFormattedTextField();
        percMAT = new javax.swing.JLabel();
        txfQL = new javax.swing.JFormattedTextField();
        percQL = new javax.swing.JLabel();
        txfAL = new javax.swing.JFormattedTextField();
        percAL = new javax.swing.JLabel();
        jSeparatorNBT = new javax.swing.JSeparator();
        jpMain = new javax.swing.JPanel();
        btnStudentInfo = new javax.swing.JButton();
        btnProgrammes = new javax.swing.JButton();
        btnProgress = new javax.swing.JButton();
        mainHelp = new javax.swing.JButton();
        logOff = new javax.swing.JButton();
        lbDisclaimer = new javax.swing.JLabel();
        jpProgramme = new javax.swing.JPanel();
        lbProgrammeTitle = new javax.swing.JLabel();
        programmeTitleIcon = new javax.swing.JLabel();
        lbFilterNBT = new javax.swing.JLabel();
        txfSearch = new javax.swing.JTextField();
        programmeHelp = new javax.swing.JButton();
        btnTable = new javax.swing.JButton();
        txfDisad = new javax.swing.JFormattedTextField();
        jcFilterAQL = new javax.swing.JCheckBox();
        jcFilterMAT = new javax.swing.JCheckBox();
        lbUCT = new javax.swing.JLabel();
        jtTable = new javax.swing.JToggleButton();
        lbDisad = new javax.swing.JLabel();
        percDisad = new javax.swing.JLabel();
        txfPR = new javax.swing.JFormattedTextField();
        lbPR = new javax.swing.JLabel();
        percPR = new javax.swing.JLabel();
        lbSearch = new javax.swing.JLabel();
        jScrollTable = new javax.swing.JScrollPane();
        tblProgramme = new javax.swing.JTable();
        jSeparatorTable = new javax.swing.JSeparator();
        lbTableSettings = new javax.swing.JLabel();
        jcFilterNo = new javax.swing.JCheckBox();
        lbMoreInfo1 = new javax.swing.JLabel();
        jpProgress = new javax.swing.JPanel();
        lbProgressTitle = new javax.swing.JLabel();
        progressTitleIcon = new javax.swing.JLabel();
        graphTitle = new javax.swing.JLabel();
        progressHelp = new javax.swing.JButton();
        jrProgressYear = new javax.swing.JRadioButton();
        jrProgressTerm = new javax.swing.JRadioButton();
        jrProgressCh3 = new javax.swing.JRadioButton();
        graphY = new javax.swing.JLabel();
        graphX = new javax.swing.JLabel();
        jpChart = new javax.swing.JPanel();
        jrProgressHomeL = new javax.swing.JRadioButton();
        jrProgressAddL = new javax.swing.JRadioButton();
        jrProgressMath = new javax.swing.JRadioButton();
        jrProgressCh1 = new javax.swing.JRadioButton();
        jrProgressCh2 = new javax.swing.JRadioButton();
        jrOverall = new javax.swing.JRadioButton();
        jSeparatorProgress = new javax.swing.JSeparator();
        backGround = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setUndecorated(true);
        setResizable(false);

        jpParent.setOpaque(false);
        jpParent.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/logo.png"))); // NOI18N
        jpParent.add(Logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 75, -1, -1));

        title.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/title.png"))); // NOI18N
        jpParent.add(title, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 180, -1, -1));

        minimize.setBackground(new java.awt.Color(242, 242, 242));
        minimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/minimize.png"))); // NOI18N
        minimize.setContentAreaFilled(false);
        minimize.setFocusPainted(false);
        minimize.setPreferredSize(new java.awt.Dimension(32, 32));
        minimize.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/minimize hover.png"))); // NOI18N
        minimize.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/minimize hover.png"))); // NOI18N
        minimize.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                minimizeActionPerformed(evt);
            }
        });
        jpParent.add(minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 10, -1, -1));
        btnStudentInfo.setBackground(new Color(1.0f,1.0f,1.0f,0.0f));//set background to tranparent for drop shadow effect

        close.setBackground(new java.awt.Color(242, 242, 242));
        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/close.png"))); // NOI18N
        close.setContentAreaFilled(false);
        close.setFocusPainted(false);
        close.setPreferredSize(new java.awt.Dimension(32, 32));
        close.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/close hover.png"))); // NOI18N
        close.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/close hover.png"))); // NOI18N
        close.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                closeActionPerformed(evt);
            }
        });
        jpParent.add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 10, -1, -1));
        btnStudentInfo.setBackground(new Color(0.0f,0.0f,0.0f,0.0f));//set background to tranparent for drop shadow effect

        Back.setBackground(new java.awt.Color(242, 242, 242));
        Back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/back.png"))); // NOI18N
        Back.setMnemonic('B');
        Back.setContentAreaFilled(false);
        Back.setFocusPainted(false);
        Back.setPreferredSize(new java.awt.Dimension(32, 32));
        Back.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/back hover.png"))); // NOI18N
        Back.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/back hover.png"))); // NOI18N
        Back.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BackActionPerformed(evt);
            }
        });
        jpParent.add(Back, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));
        btnStudentInfo.setBackground(new Color(1.0f,1.0f,1.0f,0.0f));//set background to tranparent for drop shadow effect
        Back.setVisible(false);

        DragBar.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        DragBar.setForeground(new java.awt.Color(0, 102, 255));
        DragBar.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        DragBar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                DragBarMouseDragged(evt);
            }
        });
        DragBar.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                DragBarMousePressed(evt);
            }
        });
        jpParent.add(DragBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1240, 40));

        jpConfirmLogOut.setBackground(new java.awt.Color(242, 242, 242));
        jpConfirmLogOut.setOpaque(false);
        jpConfirmLogOut.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/Close.png"))); // NOI18N
        Close.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseEntered(java.awt.event.MouseEvent evt)
            {
                CloseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt)
            {
                CloseMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                CloseMouseReleased(evt);
            }
        });
        jpConfirmLogOut.add(Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, -1, 32));

        confirm.setBackground(new java.awt.Color(242, 242, 242));
        confirm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/confirm.png"))); // NOI18N
        confirm.setContentAreaFilled(false);
        confirm.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        confirm.setFocusPainted(false);
        confirm.setPreferredSize(new java.awt.Dimension(66, 66));
        confirm.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/confirm hover.png"))); // NOI18N
        confirm.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/confirm hover.png"))); // NOI18N
        confirm.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                confirmActionPerformed(evt);
            }
        });
        jpConfirmLogOut.add(confirm, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, -1, -1));
        btnStudentInfo.setBackground(new Color(0.0f,0.0f,0.0f,0.0f));//set background to tranparent for drop shadow effect

        decor.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        decor.setForeground(new java.awt.Color(0, 102, 255));
        decor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/message bar.png"))); // NOI18N
        decor.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpConfirmLogOut.add(decor, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 300, 40));

        minorBG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/messagebg.png"))); // NOI18N
        jpConfirmLogOut.add(minorBG, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, -10, -1, -1));

        jpParent.add(jpConfirmLogOut, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 240, -1, -1));
        jpConfirmLogOut.setVisible(false);

        jpStudent.setOpaque(false);
        jpStudent.setPreferredSize(new java.awt.Dimension(1242, 450));
        jpStudent.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txfHomeL.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 255)));
        txfHomeL.setColumns(1);
        txfHomeL.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txfHomeL.setCaretColor(new java.awt.Color(0, 0, 0));
        txfHomeL.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txfHomeL.setNextFocusableComponent(txfAddL);
        txfHomeL.setOpaque(false);
        jpStudent.add(txfHomeL, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 130, 50, -1));
        txfHomeL.setBackground(new Color(0, 0, 0, 0));

        txfAddL.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 255)));
        txfAddL.setColumns(1);
        txfAddL.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txfAddL.setCaretColor(new java.awt.Color(0, 0, 0));
        txfAddL.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txfAddL.setName(""); // NOI18N
        txfAddL.setNextFocusableComponent(txfMath);
        txfAddL.setOpaque(false);
        jpStudent.add(txfAddL, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 130, 50, -1));
        txfHomeL.setBackground(new Color(0, 0, 0, 0));

        txfMath.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 255)));
        txfMath.setColumns(1);
        txfMath.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txfMath.setCaretColor(new java.awt.Color(0, 0, 0));
        txfMath.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txfMath.setNextFocusableComponent(txfCh1);
        txfMath.setOpaque(false);
        jpStudent.add(txfMath, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 130, 50, -1));
        txfHomeL.setBackground(new Color(0, 0, 0, 0));

        txfCh1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 255)));
        txfCh1.setColumns(1);
        txfCh1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txfCh1.setCaretColor(new java.awt.Color(0, 0, 0));
        txfCh1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txfCh1.setNextFocusableComponent(txfCh2);
        txfCh1.setOpaque(false);
        jpStudent.add(txfCh1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 240, 50, -1));
        txfHomeL.setBackground(new Color(0, 0, 0, 0));

        txfCh2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 255)));
        txfCh2.setColumns(1);
        txfCh2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txfCh2.setCaretColor(new java.awt.Color(0, 0, 0));
        txfCh2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txfCh2.setNextFocusableComponent(txfCh3);
        txfCh2.setOpaque(false);
        jpStudent.add(txfCh2, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 240, 50, -1));
        txfHomeL.setBackground(new Color(0, 0, 0, 0));

        txfCh3.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 255)));
        txfCh3.setColumns(1);
        txfCh3.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txfCh3.setCaretColor(new java.awt.Color(0, 0, 0));
        txfCh3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txfCh3.setNextFocusableComponent(btnSave);
        txfCh3.setOpaque(false);
        jpStudent.add(txfCh3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 240, 50, -1));
        txfHomeL.setBackground(new Color(0, 0, 0, 0));

        jSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jpStudent.add(jSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, 10, 340));

        lbStudentTitle.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lbStudentTitle.setForeground(new java.awt.Color(51, 102, 255));
        lbStudentTitle.setText("Student Information");
        jpStudent.add(lbStudentTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, 40));

        studenTtitleIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/student title.png"))); // NOI18N
        jpStudent.add(studenTtitleIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 5, -1, -1));

        lbRace.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbRace.setForeground(new java.awt.Color(51, 102, 255));
        lbRace.setText("Race");
        lbRace.setToolTipText("Some uni uses to boost disadantaged student");
        jpStudent.add(lbRace, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, -1, 30));

        lbHomeL.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbHomeL.setForeground(new java.awt.Color(51, 102, 255));
        lbHomeL.setText("Home Language");
        jpStudent.add(lbHomeL, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 100, -1, 30));

        lbAddL.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbAddL.setForeground(new java.awt.Color(51, 102, 255));
        lbAddL.setText("First Additional Language");
        jpStudent.add(lbAddL, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 100, -1, 30));

        lbCh3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbCh3.setForeground(new java.awt.Color(51, 102, 255));
        lbCh3.setText("Subject Choice Three");
        jpStudent.add(lbCh3, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 210, -1, 30));

        lbMath.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbMath.setForeground(new java.awt.Color(51, 102, 255));
        lbMath.setText("Mathematics");
        jpStudent.add(lbMath, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 100, -1, 30));

        lbCh1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbCh1.setForeground(new java.awt.Color(51, 102, 255));
        lbCh1.setText("Subject Choice One");
        jpStudent.add(lbCh1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 210, -1, 30));

        lbCh2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbCh2.setForeground(new java.awt.Color(51, 102, 255));
        lbCh2.setText("Subject Choice Two");
        jpStudent.add(lbCh2, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 210, -1, 30));

        lbGrade.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbGrade.setForeground(new java.awt.Color(51, 102, 255));
        lbGrade.setText("Grade");
        jpStudent.add(lbGrade, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 20, -1, 30));

        lbTerm.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbTerm.setForeground(new java.awt.Color(51, 102, 255));
        lbTerm.setText("Term");
        jpStudent.add(lbTerm, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 20, -1, 30));
        lbTerm.setVisible(false);

        studentHelp.setBackground(new java.awt.Color(242, 242, 242));
        studentHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/help.png"))); // NOI18N
        studentHelp.setMnemonic('H');
        studentHelp.setContentAreaFilled(false);
        studentHelp.setFocusPainted(false);
        studentHelp.setPreferredSize(new java.awt.Dimension(32, 32));
        studentHelp.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/help hover.png"))); // NOI18N
        studentHelp.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/help hover.png"))); // NOI18N
        studentHelp.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                studentHelpActionPerformed(evt);
            }
        });
        jpStudent.add(studentHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, -1, -1));
        btnStudentInfo.setBackground(new Color(1.0f,1.0f,1.0f,0.0f));//set background to tranparent for drop shadow effect

        jcHomeL.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "English", "Afrikaans", "German ", "French", "Mandarin" }));
        jcHomeL.setSelectedItem(null);
        jcHomeL.setToolTipText("Select Your Relative Subject");
        jcHomeL.setDoubleBuffered(true);
        jcHomeL.setFocusable(false);
        jpStudent.add(jcHomeL, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 130, 180, 30));

        jcAddL.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Afrikaans", "Isizulu", "English", "Spanish", "German", "CAT" }));
        jcAddL.setSelectedItem(null);
        jcAddL.setToolTipText("Select Your Relative Subject");
        jcAddL.setFocusable(false);
        jpStudent.add(jcAddL, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 130, 180, 30));

        jcMath.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mathematics", "Math Literacy" }));
        jcMath.setSelectedItem(null);
        jcMath.setToolTipText("Select Your Relative Subject");
        jcMath.setFocusable(false);
        jpStudent.add(jcMath, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 130, 180, 30));

        jcCh1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Accounting", "Business Studies", "Civil Technology", "CAT", "Consumer Studies", "Dance", "Design", "Dramatic Arts", "Economics", "EGD", "Equine Studies", "Geography", "History", "Hospitality Studies", "IT", "Life Sciences", "Music", "Physical Sciences", "Sports Science", "Tourism", "Visual Arts" }));
        jcCh1.setSelectedItem(null);
        jcCh1.setToolTipText("Select Your Relative Subject");
        jcCh1.setFocusable(false);
        jpStudent.add(jcCh1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 240, 180, 30));

        jcCh2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Accounting", "Business Studies", "Civil Technology", "CAT", "Consumer Studies", "Dance", "Design", "Dramatic Arts", "Economics", "EGD", "Equine Studies", "Geography", "History", "Hospitality Studies", "IT", "Life Sciences", "Music", "Physical Sciences", "Sports Science", "Tourism", "Visual Arts" }));
        jcCh2.setSelectedItem(null);
        jcCh2.setToolTipText("Select Your Relative Subject");
        jcCh2.setFocusable(false);
        jpStudent.add(jcCh2, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 240, 180, 30));

        jcCh3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Accounting", "Business Studies", "Civil Technology", "CAT", "Consumer Studies", "Dance", "Design", "Dramatic Arts", "Economics", "EGD", "Equine Studies", "Geography", "History", "Hospitality Studies", "IT", "Life Sciences", "Music", "Physical Sciences", "Sports Science", "Tourism", "Visual Arts" }));
        jcCh3.setSelectedItem(null);
        jcCh3.setToolTipText("Select Your Relative Subject");
        jcCh3.setFocusable(false);
        jpStudent.add(jcCh3, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 240, 180, 30));

        jcGrade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10", "11", "12" }));
        jcGrade.setSelectedItem(null);
        jcGrade.setToolTipText("Select Your Relative Subject");
        jcGrade.setFocusable(false);
        jpStudent.add(jcGrade, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 20, 90, 30));

        jcTerm.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));
        jcTerm.setSelectedItem(null);
        jcTerm.setToolTipText("Select Your Relative Subject");
        jcTerm.setFocusable(false);
        jpStudent.add(jcTerm, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 20, 80, 30));
        jcTerm.setVisible(false);

        btngRace.add(jrWhite);
        jrWhite.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jrWhite.setForeground(new java.awt.Color(0, 102, 255));
        jrWhite.setText("White");
        jrWhite.setContentAreaFilled(false);
        jpStudent.add(jrWhite, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 340, -1, -1));

        btngRace.add(jrBlack);
        jrBlack.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jrBlack.setForeground(new java.awt.Color(0, 102, 255));
        jrBlack.setText("Black");
        jrBlack.setContentAreaFilled(false);
        jpStudent.add(jrBlack, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, -1, -1));

        btngRace.add(jrIndian);
        jrIndian.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jrIndian.setForeground(new java.awt.Color(0, 102, 255));
        jrIndian.setText("Indian");
        jrIndian.setContentAreaFilled(false);
        jpStudent.add(jrIndian, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, -1, -1));

        btngRace.add(jrColoured);
        jrColoured.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jrColoured.setForeground(new java.awt.Color(0, 102, 255));
        jrColoured.setText("Coloured");
        jrColoured.setContentAreaFilled(false);
        jpStudent.add(jrColoured, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, -1));

        btngRace.add(jrAsian);
        jrAsian.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jrAsian.setForeground(new java.awt.Color(0, 102, 255));
        jrAsian.setMnemonic('K');
        jrAsian.setText("Asian");
        jrAsian.setToolTipText("");
        jrAsian.setContentAreaFilled(false);
        jpStudent.add(jrAsian, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, -1, -1));

        jtMarks.setBackground(new java.awt.Color(242, 242, 242));
        jtMarks.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jtMarks.setForeground(new java.awt.Color(0, 102, 255));
        jtMarks.setText("Year Mark");
        jtMarks.setToolTipText("Year/Term mark toggle");
        jtMarks.setContentAreaFilled(false);
        jtMarks.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jtMarksActionPerformed(evt);
            }
        });
        jpStudent.add(jtMarks, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 10, 170, 50));

        btnSave.setBackground(new java.awt.Color(242, 242, 242));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/save.png"))); // NOI18N
        btnSave.setMnemonic(KeyEvent.VK_ENTER);
        btnSave.setToolTipText("");
        btnSave.setContentAreaFilled(false);
        btnSave.setNextFocusableComponent(txfHomeL);
        btnSave.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/save press.png"))); // NOI18N
        btnSave.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/save hover.png"))); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSaveActionPerformed(evt);
            }
        });
        jpStudent.add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 360, 60, 70));

        btnCheck.setBackground(new java.awt.Color(242, 242, 242));
        btnCheck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/check.png"))); // NOI18N
        btnCheck.setToolTipText(null);
        btnCheck.setContentAreaFilled(false);
        btnCheck.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/check press.png"))); // NOI18N
        btnCheck.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/check hover.png"))); // NOI18N
        btnCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCheckActionPerformed(evt);
            }
        });
        jpStudent.add(btnCheck, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 360, 80, 70));

        percCh3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        percCh3.setForeground(new java.awt.Color(51, 102, 255));
        percCh3.setText("%");
        jpStudent.add(percCh3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 240, -1, 20));

        percHomeL.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        percHomeL.setForeground(new java.awt.Color(51, 102, 255));
        percHomeL.setText("%");
        jpStudent.add(percHomeL, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 130, -1, 20));

        percAddL.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        percAddL.setForeground(new java.awt.Color(51, 102, 255));
        percAddL.setText("%");
        jpStudent.add(percAddL, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 130, -1, 20));

        percMath.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        percMath.setForeground(new java.awt.Color(51, 102, 255));
        percMath.setText("%");
        jpStudent.add(percMath, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 130, -1, 20));

        percCh1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        percCh1.setForeground(new java.awt.Color(51, 102, 255));
        percCh1.setText("%");
        jpStudent.add(percCh1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 240, -1, 20));

        percCh2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        percCh2.setForeground(new java.awt.Color(51, 102, 255));
        percCh2.setText("%");
        jpStudent.add(percCh2, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 240, -1, 20));

        lbMoreInfo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbMoreInfo.setForeground(new java.awt.Color(153, 153, 153));
        lbMoreInfo.setText("<html><strong>*</strong>Only the <strong>Latest Mark</strong> (Term or Year) is used to calculate your Personalise Programmes<br><strong>Cerntain Programmes</strong> will not be Peronalized if </strong>NBT is omitted. <strong>Click the help icon for more detail</strong></html>");
        jpStudent.add(lbMoreInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 410, 810, 40));

        lbMAT.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbMAT.setForeground(new java.awt.Color(51, 102, 255));
        lbMAT.setText("<html>Mathermatics (MAT)</html>");
        jpStudent.add(lbMAT, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 350, -1, 50));

        lbAL.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbAL.setForeground(new java.awt.Color(51, 102, 255));
        lbAL.setText("<html>Academic Literacy (AL)</html>");
        jpStudent.add(lbAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 360, -1, -1));

        lbQL.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbQL.setForeground(new java.awt.Color(51, 102, 255));
        lbQL.setText("<html>Quantitative Literacy (QL)</html>");
        jpStudent.add(lbQL, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 350, -1, 50));

        lbNBT.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbNBT.setForeground(new java.awt.Color(51, 102, 255));
        lbNBT.setText("<html>NBT   <small>( Optional )</small></html>");
        lbNBT.setToolTipText("");
        jpStudent.add(lbNBT, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 310, -1, 30));

        lbSubjects.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbSubjects.setForeground(new java.awt.Color(51, 102, 255));
        lbSubjects.setText("Subjects");
        lbSubjects.setToolTipText("");
        jpStudent.add(lbSubjects, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 60, -1, 30));

        txfMAT.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 255)));
        txfMAT.setColumns(1);
        txfMAT.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txfMAT.setCaretColor(new java.awt.Color(0, 0, 0));
        txfMAT.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txfMAT.setNextFocusableComponent(btnSave);
        txfMAT.setOpaque(false);
        jpStudent.add(txfMAT, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 360, 50, -1));
        txfHomeL.setBackground(new Color(0, 0, 0, 0));

        percMAT.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        percMAT.setForeground(new java.awt.Color(51, 102, 255));
        percMAT.setText("%");
        jpStudent.add(percMAT, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 360, -1, 20));

        txfQL.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 255)));
        txfQL.setColumns(1);
        txfQL.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txfQL.setCaretColor(new java.awt.Color(0, 0, 0));
        txfQL.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txfQL.setNextFocusableComponent(btnSave);
        txfQL.setOpaque(false);
        jpStudent.add(txfQL, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 360, 50, -1));
        txfHomeL.setBackground(new Color(0, 0, 0, 0));

        percQL.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        percQL.setForeground(new java.awt.Color(51, 102, 255));
        percQL.setText("%");
        jpStudent.add(percQL, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 360, -1, 20));

        txfAL.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 255)));
        txfAL.setColumns(1);
        txfAL.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txfAL.setCaretColor(new java.awt.Color(0, 0, 0));
        txfAL.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txfAL.setNextFocusableComponent(btnSave);
        txfAL.setOpaque(false);
        jpStudent.add(txfAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 360, 50, -1));
        txfHomeL.setBackground(new Color(0, 0, 0, 0));

        percAL.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        percAL.setForeground(new java.awt.Color(51, 102, 255));
        percAL.setText("%");
        jpStudent.add(percAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 360, -1, 20));
        jpStudent.add(jSeparatorNBT, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 300, 820, 10));

        jpParent.add(jpStudent, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 1242, 450));
        jpStudent.setVisible(false);

        jpMain.setFocusTraversalPolicyProvider(true);
        jpMain.setOpaque(false);
        jpMain.setPreferredSize(new java.awt.Dimension(1266, 721));
        jpMain.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnStudentInfo.setBackground(new java.awt.Color(242, 242, 242));
        btnStudentInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/student.png"))); // NOI18N
        btnStudentInfo.setMnemonic('Z');
        btnStudentInfo.setToolTipText("Tab to input academic details");
        btnStudentInfo.setContentAreaFilled(false);
        btnStudentInfo.setHideActionText(true);
        btnStudentInfo.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnStudentInfo.setMaximumSize(new java.awt.Dimension(197, 152));
        btnStudentInfo.setMinimumSize(new java.awt.Dimension(197, 152));
        btnStudentInfo.setPreferredSize(new java.awt.Dimension(285, 225));
        btnStudentInfo.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/student press.png"))); // NOI18N
        btnStudentInfo.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/student hover.png"))); // NOI18N
        btnStudentInfo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnStudentInfoActionPerformed(evt);
            }
        });
        jpMain.add(btnStudentInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(103, 330, -1, -1));
        btnStudentInfo.setBackground(new Color(1.0f,1.0f,1.0f,0.0f));//set background to tranparent for drop shadow effect

        btnProgrammes.setBackground(new java.awt.Color(242, 242, 242));
        btnProgrammes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/programmes.png"))); // NOI18N
        btnProgrammes.setMnemonic('X');
        btnProgrammes.setToolTipText("To view personalised programme list according to your Latest academic achievments");
        btnProgrammes.setContentAreaFilled(false);
        btnProgrammes.setHideActionText(true);
        btnProgrammes.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnProgrammes.setMaximumSize(new java.awt.Dimension(197, 152));
        btnProgrammes.setMinimumSize(new java.awt.Dimension(197, 152));
        btnProgrammes.setPreferredSize(new java.awt.Dimension(285, 225));
        btnProgrammes.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/programmes press.png"))); // NOI18N
        btnProgrammes.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/programmes hover.png"))); // NOI18N
        btnProgrammes.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnProgrammesActionPerformed(evt);
            }
        });
        jpMain.add(btnProgrammes, new org.netbeans.lib.awtextra.AbsoluteConstraints(491, 330, -1, -1));
        btnStudentInfo.setBackground(new Color(1.0f,1.0f,1.0f,0.0f));//set background to tranparent for drop shadow effect

        btnProgress.setBackground(new java.awt.Color(242, 242, 242));
        btnProgress.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/progress.png"))); // NOI18N
        btnProgress.setMnemonic('C');
        btnProgress.setToolTipText("To view a graphical representation of your year and term mark for tracking of your academic progress");
        btnProgress.setContentAreaFilled(false);
        btnProgress.setHideActionText(true);
        btnProgress.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnProgress.setMaximumSize(new java.awt.Dimension(197, 152));
        btnProgress.setMinimumSize(new java.awt.Dimension(197, 152));
        btnProgress.setPreferredSize(new java.awt.Dimension(285, 225));
        btnProgress.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/progress press.png"))); // NOI18N
        btnProgress.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/progress hover.png"))); // NOI18N
        btnProgress.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnProgressActionPerformed(evt);
            }
        });
        jpMain.add(btnProgress, new org.netbeans.lib.awtextra.AbsoluteConstraints(879, 330, -1, -1));
        btnStudentInfo.setBackground(new Color(1.0f,1.0f,1.0f,0.0f));//set background to tranparent for drop shadow effect

        mainHelp.setBackground(new java.awt.Color(242, 242, 242));
        mainHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/help.png"))); // NOI18N
        mainHelp.setMnemonic('H');
        mainHelp.setContentAreaFilled(false);
        mainHelp.setFocusPainted(false);
        mainHelp.setPreferredSize(new java.awt.Dimension(32, 32));
        mainHelp.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/help hover.png"))); // NOI18N
        mainHelp.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/help hover.png"))); // NOI18N
        mainHelp.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mainHelpActionPerformed(evt);
            }
        });
        jpMain.add(mainHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 660, -1, -1));
        btnStudentInfo.setBackground(new Color(1.0f,1.0f,1.0f,0.0f));//set background to tranparent for drop shadow effect

        logOff.setBackground(new java.awt.Color(242, 242, 242));
        logOff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/logoff.png"))); // NOI18N
        logOff.setContentAreaFilled(false);
        logOff.setFocusPainted(false);
        logOff.setPreferredSize(new java.awt.Dimension(36, 36));
        logOff.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/logoff press.png"))); // NOI18N
        logOff.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/logoff hover.png"))); // NOI18N
        logOff.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/logoff press.png"))); // NOI18N
        logOff.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                logOffActionPerformed(evt);
            }
        });
        jpMain.add(logOff, new org.netbeans.lib.awtextra.AbsoluteConstraints(1195, 655, -1, -1));
        btnStudentInfo.setBackground(new Color(0.0f,0.0f,0.0f,0.0f));//set background to tranparent for drop shadow effect

        lbDisclaimer.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lbDisclaimer.setForeground(new java.awt.Color(153, 153, 153));
        lbDisclaimer.setText("<html><strong>*</strong> Highly Recommend Checking Out the <strong>Help Page</strong> first for new users <br><strong>NB:</strong> This Programme only Personalises based on the <strong>minimum requirement</strong> of each university programmes. <br>Therefore for admission, you will need a APS score at least 10-30 % higher than the minimum APS score<br><br>After filtering the programmes and finding your programme of interest <strong><br>its recommended to go to check to actual university prospectus as there might be additional requirement than just academic marks<br>Do Not take the infomation in this programme for granted</strong></html>");
        jpMain.add(lbDisclaimer, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 580, 730, 120));

        jpParent.add(jpMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jpProgramme.setBackground(new java.awt.Color(242, 242, 242));
        jpProgramme.setMinimumSize(new java.awt.Dimension(1240, 458));
        jpProgramme.setPreferredSize(new java.awt.Dimension(1242, 450));
        jpProgramme.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbProgrammeTitle.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lbProgrammeTitle.setForeground(new java.awt.Color(51, 102, 255));
        lbProgrammeTitle.setText("Personalised Programme");
        jpProgramme.add(lbProgrammeTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, 50));

        programmeTitleIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/programme title.png"))); // NOI18N
        jpProgramme.add(programmeTitleIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 5, -1, -1));

        lbFilterNBT.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lbFilterNBT.setForeground(new java.awt.Color(51, 102, 255));
        lbFilterNBT.setText("NBT Filter");
        lbFilterNBT.setToolTipText("Filter according to NBT requirement");
        jpProgramme.add(lbFilterNBT, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 170, -1, 20));

        txfSearch.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txfSearch.setToolTipText("Searches the currently Displaying Table");
        txfSearch.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 255)));
        txfSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txfSearch.setOpaque(false);
        txfSearch.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                txfSearchKeyReleased(evt);
            }
        });
        jpProgramme.add(txfSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 30, 460, 30));
        txfSearch.setBackground(new Color(0, 0, 0, 0));

        programmeHelp.setBackground(new java.awt.Color(242, 242, 242));
        programmeHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/help.png"))); // NOI18N
        programmeHelp.setMnemonic('H');
        programmeHelp.setContentAreaFilled(false);
        programmeHelp.setFocusPainted(false);
        programmeHelp.setPreferredSize(new java.awt.Dimension(32, 32));
        programmeHelp.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/help hover.png"))); // NOI18N
        programmeHelp.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/help hover.png"))); // NOI18N
        programmeHelp.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                programmeHelpActionPerformed(evt);
            }
        });
        jpProgramme.add(programmeHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, -1, -1));
        btnStudentInfo.setBackground(new Color(1.0f,1.0f,1.0f,0.0f));//set background to tranparent for drop shadow effect

        btnTable.setBackground(new java.awt.Color(242, 242, 242));
        btnTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/display.png"))); // NOI18N
        btnTable.setMnemonic(KeyEvent.VK_ENTER);
        btnTable.setToolTipText("Apply settings");
        btnTable.setContentAreaFilled(false);
        btnTable.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/display press.png"))); // NOI18N
        btnTable.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/display hover.png"))); // NOI18N
        btnTable.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnTableActionPerformed(evt);
            }
        });
        jpProgramme.add(btnTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 400, -1, -1));

        txfDisad.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 255)));
        txfDisad.setColumns(1);
        txfDisad.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txfDisad.setText("0");
        txfDisad.setCaretColor(new java.awt.Color(0, 0, 0));
        txfDisad.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txfDisad.setName(""); // NOI18N
        txfDisad.setNextFocusableComponent(txfMath);
        txfDisad.setOpaque(false);
        jpProgramme.add(txfDisad, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 320, 30, -1));
        txfHomeL.setBackground(new Color(0, 0, 0, 0));

        jcFilterAQL.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jcFilterAQL.setForeground(new java.awt.Color(51, 102, 255));
        jcFilterAQL.setText("AQL");
        jcFilterAQL.setContentAreaFilled(false);
        jcFilterAQL.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jcFilterAQLActionPerformed(evt);
            }
        });
        jpProgramme.add(jcFilterAQL, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 190, -1, -1));

        jcFilterMAT.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jcFilterMAT.setForeground(new java.awt.Color(51, 102, 255));
        jcFilterMAT.setText("MAT");
        jcFilterMAT.setContentAreaFilled(false);
        jcFilterMAT.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jcFilterMATActionPerformed(evt);
            }
        });
        jpProgramme.add(jcFilterMAT, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 220, -1, -1));
        jcFilterMAT.getAccessibleContext().setAccessibleDescription("");

        lbUCT.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lbUCT.setForeground(new java.awt.Color(51, 102, 255));
        lbUCT.setText("<html>UCT additional settings<br><small> ( optional )</small></html>");
        lbUCT.setToolTipText("Note that if not filed some information will not show");
        jpProgramme.add(lbUCT, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 280, -1, 40));

        jtTable.setBackground(new java.awt.Color(242, 242, 242));
        jtTable.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jtTable.setForeground(new java.awt.Color(0, 102, 255));
        jtTable.setText("Personalise");
        jtTable.setToolTipText("Personalized/All Programmes Toggle");
        jtTable.setContentAreaFilled(false);
        jtTable.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jtTableActionPerformed(evt);
            }
        });
        jpProgramme.add(jtTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 100, 140, 40));

        lbDisad.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbDisad.setForeground(new java.awt.Color(51, 102, 255));
        lbDisad.setText("Disad factor");
        lbDisad.setToolTipText("Self-Estination of extra APS: 0 - 10% (20% for MBChB) for disadvantaged racial group. See detail in Help Page");
        jpProgramme.add(lbDisad, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 320, 80, 20));

        percDisad.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        percDisad.setForeground(new java.awt.Color(51, 102, 255));
        percDisad.setText("%");
        jpProgramme.add(percDisad, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 320, 10, -1));

        txfPR.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 102, 255)));
        txfPR.setColumns(1);
        txfPR.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txfPR.setText("0");
        txfPR.setCaretColor(new java.awt.Color(0, 0, 0));
        txfPR.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txfPR.setName(""); // NOI18N
        txfPR.setNextFocusableComponent(txfMath);
        txfPR.setOpaque(false);
        jpProgramme.add(txfPR, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 350, 30, -1));
        txfHomeL.setBackground(new Color(0, 0, 0, 0));

        lbPR.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbPR.setForeground(new java.awt.Color(51, 102, 255));
        lbPR.setText("<html>Personal Report<br><small>*For UCT MBChB Students</small><html>");
        lbPR.setToolTipText("FOR MBChB Degree ONLY. A Self-Estimation Mark from 0-100%. See Detail in Help Page");
        jpProgramme.add(lbPR, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 350, -1, -1));

        percPR.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        percPR.setForeground(new java.awt.Color(51, 102, 255));
        percPR.setText("%");
        jpProgramme.add(percPR, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 350, 10, -1));

        lbSearch.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbSearch.setForeground(new java.awt.Color(51, 102, 255));
        lbSearch.setText("<html>Search</html>");
        jpProgramme.add(lbSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 0, -1, 30));

        tblProgramme.setAutoCreateRowSorter(true);
        tblProgramme.setBackground(new java.awt.Color(242, 242, 242));
        tblProgramme.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Programme", "University", "Years", "Faculty", "Min APS", "Your APS", "AQL", "MAT"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tblProgramme.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblProgramme.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblProgramme.setFocusable(false);
        tblProgramme.setGridColor(new java.awt.Color(242, 242, 242));
        tblProgramme.setOpaque(false);
        tblProgramme.setRowHeight(35);
        tblProgramme.setSelectionBackground(new java.awt.Color(51, 153, 255));
        jScrollTable.setViewportView(tblProgramme);
        if (tblProgramme.getColumnModel().getColumnCount() > 0)
        {
            tblProgramme.getColumnModel().getColumn(0).setPreferredWidth(200);
            tblProgramme.getColumnModel().getColumn(1).setMinWidth(90);
            tblProgramme.getColumnModel().getColumn(1).setMaxWidth(90);
            tblProgramme.getColumnModel().getColumn(2).setMinWidth(50);
            tblProgramme.getColumnModel().getColumn(2).setMaxWidth(50);
            tblProgramme.getColumnModel().getColumn(4).setMinWidth(100);
            tblProgramme.getColumnModel().getColumn(4).setMaxWidth(100);
            tblProgramme.getColumnModel().getColumn(5).setMinWidth(80);
            tblProgramme.getColumnModel().getColumn(5).setMaxWidth(80);
            tblProgramme.getColumnModel().getColumn(6).setMinWidth(45);
            tblProgramme.getColumnModel().getColumn(6).setMaxWidth(45);
            tblProgramme.getColumnModel().getColumn(7).setMinWidth(45);
            tblProgramme.getColumnModel().getColumn(7).setMaxWidth(45);
        }

        jpProgramme.add(jScrollTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 1050, 330));

        jSeparatorTable.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jpProgramme.add(jSeparatorTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 20, 10, 410));

        lbTableSettings.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbTableSettings.setForeground(new java.awt.Color(51, 102, 255));
        lbTableSettings.setText("Table Settings");
        lbTableSettings.setToolTipText("");
        jpProgramme.add(lbTableSettings, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 40, 130, 30));

        jcFilterNo.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        jcFilterNo.setForeground(new java.awt.Color(51, 102, 255));
        jcFilterNo.setSelected(true);
        jcFilterNo.setText("Disable NBT Filter");
        jcFilterNo.setToolTipText(null);
        jcFilterNo.setContentAreaFilled(false);
        jcFilterNo.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jcFilterNoActionPerformed(evt);
            }
        });
        jpProgramme.add(jcFilterNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 250, -1, -1));

        lbMoreInfo1.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        lbMoreInfo1.setForeground(new java.awt.Color(153, 153, 153));
        lbMoreInfo1.setText("<html><strong>*</strong>By clicking the <strong>Cloumn Header </strong>you can sort the column in <strong>alphabetical order</strong> ( ascending order for numbers )<br>*The search bar will search the current table (personalised or showing all programmes) for <strong>any matching of input to a whole row</strong>.                         <strong>Click the help icon for more detail</strong></html>");
        jpProgramme.add(lbMoreInfo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 400, 890, 50));

        jpParent.add(jpProgramme, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, -1, -1));
        jpProgramme.setVisible(false);

        jpProgress.setMinimumSize(new java.awt.Dimension(1240, 458));
        jpProgress.setOpaque(false);
        jpProgress.setPreferredSize(new java.awt.Dimension(1242, 450));
        jpProgress.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbProgressTitle.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lbProgressTitle.setForeground(new java.awt.Color(51, 102, 255));
        lbProgressTitle.setText("Academic Progress");
        jpProgress.add(lbProgressTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, 50));

        progressTitleIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/progress title.png"))); // NOI18N
        jpProgress.add(progressTitleIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 5, -1, -1));

        graphTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        graphTitle.setForeground(new java.awt.Color(51, 102, 255));
        graphTitle.setText("Progression of Average Term Marks");
        jpProgress.add(graphTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 60, -1, 40));

        progressHelp.setBackground(new java.awt.Color(242, 242, 242));
        progressHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/help.png"))); // NOI18N
        progressHelp.setMnemonic('H');
        progressHelp.setContentAreaFilled(false);
        progressHelp.setFocusPainted(false);
        progressHelp.setPreferredSize(new java.awt.Dimension(32, 32));
        progressHelp.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/help hover.png"))); // NOI18N
        progressHelp.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/help hover.png"))); // NOI18N
        progressHelp.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                progressHelpActionPerformed(evt);
            }
        });
        jpProgress.add(progressHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 410, -1, -1));
        btnStudentInfo.setBackground(new Color(1.0f,1.0f,1.0f,0.0f));//set background to tranparent for drop shadow effect

        btngProgress.add(jrProgressYear);
        jrProgressYear.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jrProgressYear.setForeground(new java.awt.Color(51, 102, 255));
        jrProgressYear.setText("Year Mark");
        jrProgressYear.setContentAreaFilled(false);
        jrProgressYear.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jrProgressYearActionPerformed(evt);
            }
        });
        jpProgress.add(jrProgressYear, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 20, -1, -1));

        btngProgress.add(jrProgressTerm);
        jrProgressTerm.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jrProgressTerm.setForeground(new java.awt.Color(51, 102, 255));
        jrProgressTerm.setSelected(true);
        jrProgressTerm.setText("Term Mark");
        jrProgressTerm.setContentAreaFilled(false);
        jrProgressTerm.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jrProgressTermActionPerformed(evt);
            }
        });
        jpProgress.add(jrProgressTerm, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 20, -1, -1));

        btngSubject.add(jrProgressCh3);
        jrProgressCh3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jrProgressCh3.setForeground(new java.awt.Color(51, 102, 255));
        jrProgressCh3.setText("Choice 3");
        jrProgressCh3.setContentAreaFilled(false);
        jrProgressCh3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jrProgressCh3ActionPerformed(evt);
            }
        });
        jpProgress.add(jrProgressCh3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 400, -1, -1));

        graphY.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        graphY.setForeground(new java.awt.Color(51, 102, 255));
        graphY.setText("Mark (%)");
        jpProgress.add(graphY, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 220, -1, 30));

        graphX.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        graphX.setForeground(new java.awt.Color(51, 102, 255));
        graphX.setText("Time");
        jpProgress.add(graphX, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 410, 60, 30));

        jpChart.setLayout(new java.awt.BorderLayout());
        jpProgress.add(jpChart, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 910, 310));

        btngSubject.add(jrProgressHomeL);
        jrProgressHomeL.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jrProgressHomeL.setForeground(new java.awt.Color(51, 102, 255));
        jrProgressHomeL.setText("Home Language");
        jrProgressHomeL.setContentAreaFilled(false);
        jrProgressHomeL.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jrProgressHomeLActionPerformed(evt);
            }
        });
        jpProgress.add(jrProgressHomeL, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 150, -1, -1));

        btngSubject.add(jrProgressAddL);
        jrProgressAddL.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jrProgressAddL.setForeground(new java.awt.Color(51, 102, 255));
        jrProgressAddL.setText("Additional Language");
        jrProgressAddL.setContentAreaFilled(false);
        jrProgressAddL.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jrProgressAddLActionPerformed(evt);
            }
        });
        jpProgress.add(jrProgressAddL, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 200, -1, -1));

        btngSubject.add(jrProgressMath);
        jrProgressMath.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jrProgressMath.setForeground(new java.awt.Color(51, 102, 255));
        jrProgressMath.setText("Mathematics");
        jrProgressMath.setContentAreaFilled(false);
        jrProgressMath.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jrProgressMathActionPerformed(evt);
            }
        });
        jpProgress.add(jrProgressMath, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 250, -1, -1));

        btngSubject.add(jrProgressCh1);
        jrProgressCh1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jrProgressCh1.setForeground(new java.awt.Color(51, 102, 255));
        jrProgressCh1.setText("Choice 1");
        jrProgressCh1.setContentAreaFilled(false);
        jrProgressCh1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jrProgressCh1ActionPerformed(evt);
            }
        });
        jpProgress.add(jrProgressCh1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 300, -1, -1));

        btngSubject.add(jrProgressCh2);
        jrProgressCh2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jrProgressCh2.setForeground(new java.awt.Color(51, 102, 255));
        jrProgressCh2.setText("Choice 2");
        jrProgressCh2.setContentAreaFilled(false);
        jrProgressCh2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jrProgressCh2ActionPerformed(evt);
            }
        });
        jpProgress.add(jrProgressCh2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 350, -1, -1));

        btngSubject.add(jrOverall);
        jrOverall.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jrOverall.setForeground(new java.awt.Color(51, 102, 255));
        jrOverall.setSelected(true);
        jrOverall.setText("Avgerage Mark");
        jrOverall.setContentAreaFilled(false);
        jrOverall.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jrOverallActionPerformed(evt);
            }
        });
        jpProgress.add(jrOverall, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 100, -1, -1));
        jpProgress.add(jSeparatorProgress, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 80, 310, 10));

        jpParent.add(jpProgress, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, -1, -1));
        jpProgress.setVisible(false);

        backGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/mainbg.png"))); // NOI18N
        jpParent.add(backGround, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, -10, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpParent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpParent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DragBarMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_DragBarMouseDragged
    {//GEN-HEADEREND:event_DragBarMouseDragged
        new Drag(DragBar).moveWindow(evt);
        //drag function without default boaders, able to move the window
    }//GEN-LAST:event_DragBarMouseDragged

    private void DragBarMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_DragBarMousePressed
    {//GEN-HEADEREND:event_DragBarMousePressed
        new Drag(DragBar).onPress(evt);
        //drag function without default boaders
    }//GEN-LAST:event_DragBarMousePressed

    private void BackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BackActionPerformed
    {//GEN-HEADEREND:event_BackActionPerformed
        if (jpStudent.isVisible())//displays itself in sub tabs like student information 
        {//and hids in main frame menu
            jpStudent.setVisible(false);
            jpMain.setVisible(true);
        } else if (jpProgramme.isVisible())
        {
            jpProgramme.setVisible(false);
            jpMain.setVisible(true);
        } else if (jpProgress.isVisible())
        {
            jpProgress.setVisible(false);
            jpMain.setVisible(true);
            jrProgressTerm.setSelected(true);//reset the progress tab setting
            jrOverall.setSelected(true);//reset the progress tab setting
        }
        Back.setVisible(false);
    }//GEN-LAST:event_BackActionPerformed

    private void btnStudentInfoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnStudentInfoActionPerformed
    {//GEN-HEADEREND:event_btnStudentInfoActionPerformed
        Back.setVisible(true);//show back button
        jpMain.setVisible(false);//close menu
        jpStudent.setVisible(true);//open student tab

        String race = "", homel = "", addl = "", math = "", ch1 = "", ch2 = "", ch3 = "";
        int AL = 0, QL = 0, MAT = 0;
        try
        {//creating an object to grab data from db to generate pre-selected combo box according to existing user
            if (!db.isNewUser(user))//if its a new user, there is no existing subject selection
            {//if exist than pre- select it for the user, for ease of use
                Student s = db.populateStudent(user);
                //get data from object using a DBManager method
                race = s.getRace();
                homel = s.getHomel();
                addl = s.getAddl();
                math = s.getMath();
                ch1 = s.getCh1();
                ch2 = s.getCh2();
                ch3 = s.getCh3();
                AL = s.getAL();
                QL = s.getQL();
                MAT = s.getMAT();
                if (jrBlack.getText().equals(race))
                {//determines race and select it automatically when existing user logins in
                    jrBlack.setSelected(true);
                } else if (jrColoured.getText().equals(race))
                {
                    jrColoured.setSelected(true);
                } else if (jrIndian.getText().equals(race))
                {
                    jrIndian.setSelected(true);
                } else if (jrAsian.getText().equals(race))
                {
                    jrAsian.setSelected(true);
                } else
                {
                    jrWhite.setSelected(true);
                }
                //set these selections
                jcHomeL.setSelectedItem(homel);
                jcAddL.setSelectedItem(addl);
                jcMath.setSelectedItem(math);
                jcCh1.setSelectedItem(ch1);
                jcCh2.setSelectedItem(ch2);
                jcCh3.setSelectedItem(ch3);
                //a mark of 0 mean user haven't enetered a value or haven't done NBT
                //If the above is true value is set to 0 so when extracting the data from db it will display nothing as its 0
                //determine and set the value of nbts from existing code
                if (AL == 0)
                {
                    txfAL.setText("");
                } else
                {
                    txfAL.setText(AL + "");
                }
                //checking then displaying QL
                if (QL == 0)
                {
                    txfQL.setText("");
                } else
                {
                    txfQL.setText(QL + "");
                }
                //checking then displaying MAT
                if (MAT == 0)
                {
                    txfMAT.setText("");
                } else
                {
                    txfMAT.setText(MAT + "");
                }
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnStudentInfoActionPerformed

    private void minimizeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_minimizeActionPerformed
    {//GEN-HEADEREND:event_minimizeActionPerformed
        this.setState(LoginFrame.ICONIFIED);//minimize
    }//GEN-LAST:event_minimizeActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeActionPerformed
    {//GEN-HEADEREND:event_closeActionPerformed
        System.exit(0);//end the programme
    }//GEN-LAST:event_closeActionPerformed

    private void mainHelpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mainHelpActionPerformed
    {//GEN-HEADEREND:event_mainHelpActionPerformed
        GUIManager.helpFrame("<html><p align=\"center\"><h2>This Program is only suited for NSC/IEB students<br>Some less common subjects may not be included<br><br>Currently This program only supports UCT, UP, Wits<br>and Stellenbosch<br></h2>"
                + "<ul><strong>Hot Keys <br></strong>Help page: <strong>Alt+H</strong><br>"
                + "<br><li>New Users are restricted to using the <strong>Student Information Page only</strong>, <br>the other feature will unlock when sufficient student informatation is entered<br></li>"
                + "<li> Only one mark is needed to access Personalized Programmes (Year or Term)<br></li>"
                + "<li>You will need at least one Term mark and one Year mark to access Academic Progression<br></li>"
                + "<li>Student Information asks for your informations,<br> while Personalised Programme presents a all aplicable University Programs according to you <strong>Lastest </strong>Academic Achivments, <br>lastly Academic Progress uses all you pass marks to formulate a graphical reprsentation of you academic ups and downs</li>"
                + "</ul></html>");
    }//GEN-LAST:event_mainHelpActionPerformed

    private void btnProgrammesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnProgrammesActionPerformed
    {//GEN-HEADEREND:event_btnProgrammesActionPerformed
        try
        {
            if (db.isNewUser(user))//data validation
            {//restrict access for new users as they dont have enough data to use this function
                GUIManager.messageBox("<html><p align=\"center\">New users do not have access to this function yet<br><br>To access please fill in your information in<br><strong> Student Information</strong></html>");
            } else if (db.isThereNoTermMark(user) && db.isThereNoYearMark(user))//just need one mark term or year
            {
                GUIManager.messageBox("<html><p align=\"center\">Insufficient Mark information<br><br>Please fill in your Marks in<strong> Student Information</strong></html>");
            } else//passes data validation then go into Programme tab
            {
                Back.setVisible(true);
                jpMain.setVisible(false);
                jpProgramme.setVisible(true);
                Student s = db.populateStudent(user);
                if (s.getRace().equals("Black"))//pre set for the user according to their race the UCT disadvantage factor
                {//!!!!!!!this is only a estimation.
                    txfDisad.setText("8");
                } else if (s.getRace().equals("Coloured"))
                {
                    txfDisad.setText("6");
                } else if (s.getRace().equals("Indian"))
                {
                    txfDisad.setText("4");
                } else if (s.getRace().equals("Asian"))
                {
                    txfDisad.setText("2");
                } else
                {
                    txfDisad.setText("0");//white get no boost...unfortunately 
                }
                //access to the programme table settings
                DefaultTableModel model = (DefaultTableModel) tblProgramme.getModel();
                if (personal == false)//personal or all switch
                {
                    try
                    {//remove everything first from the tabel
                        for (int i = model.getRowCount() - 1; i >= 0; i--)//remove all rows
                        {
                            model.removeRow(i);
                        }
                        displayAllProgrammes();//refresh
                    } catch (SQLException ex)
                    {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else
                {
                    try
                    {
                        for (int i = model.getRowCount() - 1; i >= 0; i--)//remove all rows
                        {//remove every row
                            model.removeRow(i);
                        }
                        displayPersonalisedProgrammes();//refresh table
                    } catch (SQLException ex)
                    {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                //populate the table
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnProgrammesActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSaveActionPerformed
    {//GEN-HEADEREND:event_btnSaveActionPerformed
        String race = "";
        String homel = jcHomeL.getItemAt(jcHomeL.getSelectedIndex());
        String addl = jcAddL.getItemAt(jcAddL.getSelectedIndex());
        String math = jcMath.getItemAt(jcMath.getSelectedIndex());
        String ch1 = jcCh1.getItemAt(jcCh1.getSelectedIndex());
        String ch2 = jcCh2.getItemAt(jcCh2.getSelectedIndex());
        String ch3 = jcCh3.getItemAt(jcCh3.getSelectedIndex());
        String grade = (String) jcGrade.getSelectedItem();
        String term = (String) jcTerm.getSelectedItem();
        int intGrade, intTerm, intHomel, intAddl, intMath, intCh1, intCh2, intCh3, AL, QL, MAT;
        //assign all the variables 
        try
        { //FOR NEW USER just signed up
            if (db.isNewUser(user))
            {//if race not selected error
                if (!jrBlack.isSelected() && !jrColoured.isSelected() && !jrIndian.isSelected() && !jrAsian.isSelected() && !jrWhite.isSelected())
                {//Set of data validation, 
                    GUIManager.messageBox("Please select your Race");
                } //check duplicate subjects
                else if (homel == (null) || addl == (null) || math == (null) || ch1 == (null) || ch2 == (null) || ch3 == (null))
                {
                    GUIManager.messageBox("Please select all your subjects");
                } else if (homel == addl)
                {//rather just read the error message....it clearer what it is checking
                    GUIManager.messageBox("<html><p align=\"center\">Invalid subject selection<br><br>Home Language cannot be the same as your First Additional Language</html>");
                } else if (ch1 == ch2 || ch1 == ch3 || ch2 == ch1 || ch2 == ch3 || ch3 == ch1 || ch3 == ch2)
                {
                    GUIManager.messageBox("<html><p align=\"center\">Invalid subject selection<br><br>Same choice subject cannot be selected multiple times</html>");
                } else if (isStudentMarkEmpty())//mark coloum cannot be empty
                {
                    GUIManager.messageBox("<html><p align=\"center\">Incomplete information<br><br>Please fill in all your subject percentages</html>");
                } else if (!isMarkInRange())
                {
                    GUIManager.messageBox("<html><p align=\"center\">Invalid subject marks<br><br>Please fill in your correct subject percentages</html>");
                } else if (grade == (null) && !jtMarks.isSelected())// year mark check empty
                {
                    GUIManager.messageBox("<html><p align=\"center\">Please select the relavent<br><strong>Grade</strong> for your marks</html>");
                } else if ((grade == (null) || term == (null)) && jtMarks.isSelected())//Term mark check empty 
                {
                    GUIManager.messageBox("<html><p align=\"center\">Please select the relavent<br><strong>Grade And Term</strong> for your marks</html>");
                } else
                {// pass all validation than add user in db
                    if (txfAL.getText().equals(""))
                    {
                        AL = 0;
                    } else//making sure a null string is not parsed into a int
                    {
                        AL = Integer.parseInt(txfAL.getText());
                    }
                    //Check QL
                    if (txfQL.getText().equals(""))
                    {
                        QL = 0;
                    } else
                    {
                        QL = Integer.parseInt(txfQL.getText());
                    }
                    //ckeck MAT
                    if (txfMAT.getText().equals(""))
                    {
                        MAT = 0;
                    } else
                    {
                        MAT = Integer.parseInt(txfMAT.getText());
                    }
                    race = getSelectedBtn().getText();//get the race
                    db.insertNewUser(user, race, homel, addl, math, ch1, ch2, ch3, AL, QL, MAT);//insert a new user
                    //update will be executed evem if there is not subject change, however to validate if there is a change will require an SELECT starment which is not much more efficient than UPDATE                    
                    GUIManager.messageBox("<html><p align=\"center\">Successfully saved<br><br>To check your Personalised Programme list<br>please go back and click on the personalised programme button</html>");
                    //get the subject marks
                    intGrade = Integer.parseInt(grade);//these data a here because 
                    intHomel = Integer.parseInt(txfHomeL.getText());//parse int cannot be safely used until data validation is done
                    intAddl = Integer.parseInt(txfAddL.getText());
                    intMath = Integer.parseInt(txfMath.getText());
                    intCh1 = Integer.parseInt(txfCh1.getText());
                    intCh2 = Integer.parseInt(txfCh2.getText());
                    intCh3 = Integer.parseInt(txfCh3.getText());

                    if (!jtMarks.isSelected())//data to be send to tblmarks YEAR Mark
                    {
                        if (db.isNewYearMark(user, intGrade))//if its a new entry then
                        {
                            db.insertYearMark(user, intGrade, intHomel, intAddl, intMath, intCh1, intCh2, intCh3);
                        } else //if its an existing entry hence update..just incase
                        {
                            db.updateYearMark(user, intGrade, intHomel, intAddl, intMath, intCh1, intCh2, intCh3);
                        }
                    } else //its a term mark
                    {
                        intTerm = Integer.parseInt(term);
                        if (db.isNewTermMark(user, intGrade, intTerm))//new or not
                        {//new then add/insert
                            db.insertTermMark(user, intGrade, intTerm, intHomel, intAddl, intMath, intCh1, intCh2, intCh3);
                        } else//existing user update
                        {
                            db.updateTermMark(user, intGrade, intTerm, intHomel, intAddl, intMath, intCh1, intCh2, intCh3);
                        }
                    }
                }
            } else// for OLD USER: don need to check for null but need to check for duplicate
            {
                if (homel == addl)//validation repeat
                {
                    GUIManager.messageBox("<html><p align=\"center\">Invalid subject selection<br><br>Home Language cannot be the same as your First Additional Language</html>");
                } else if (ch1 == ch2 || ch1 == ch3 || ch2 == ch1 || ch2 == ch3 || ch3 == ch1 || ch3 == ch2)
                {
                    GUIManager.messageBox("<html><p align=\"center\">Invalid subject selection<br><br>Same choice subject cannot be selected multiple times</html>");
                } else if (isStudentMarkEmpty())//mark colum cannot be empty
                {
                    GUIManager.messageBox("<html><p align=\"center\">Incomplete information<br><br>Please fill in all your subject percentages</html>");
                } else if (!isMarkInRange())
                {
                    GUIManager.messageBox("<html><p align=\"center\">Invalid subject marks<br><br>Please fill in your correct subject percentages</html>");
                } else if (grade == (null) && !jtMarks.isSelected())// year mark check empty !!!!will not need this if imort old user exist
                {
                    GUIManager.messageBox("<html><p align=\"center\">Please select the relavent<br><strong>Grade</strong> for your marks</html>");
                } else if ((grade == (null) || term == (null)) && jtMarks.isSelected())//Term mark check empty !!!!will not need this if imort old user exist
                {
                    GUIManager.messageBox("<html><p align=\"center\">Please select the relavent<br><strong>Grade And Term</strong> for your marks</html>");
                } else//pass validaation
                {
                    //get subject marks
                    intGrade = Integer.parseInt(grade);//these data a here because 
                    intHomel = Integer.parseInt(txfHomeL.getText());//parse int cannot be safely used until data validation is done
                    intAddl = Integer.parseInt(txfAddL.getText());
                    intMath = Integer.parseInt(txfMath.getText());
                    intCh1 = Integer.parseInt(txfCh1.getText());
                    intCh2 = Integer.parseInt(txfCh2.getText());
                    intCh3 = Integer.parseInt(txfCh3.getText());
                    if (!jtMarks.isSelected())//data to be send to tblmarks YEAR Mark(that toggle of year/term)
                    {
                        if (db.isNewYearMark(user, intGrade))//if its a new entry then
                        {
                            db.insertYearMark(user, intGrade, intHomel, intAddl, intMath, intCh1, intCh2, intCh3);
                        } else //if its an existing entry hence update
                        {
                            db.updateYearMark(user, intGrade, intHomel, intAddl, intMath, intCh1, intCh2, intCh3);
                        }
                    } else //its a term mark
                    {
                        intTerm = Integer.parseInt(term);
                        if (db.isNewTermMark(user, intGrade, intTerm))//new or not
                        {//new then add/insert
                            db.insertTermMark(user, intGrade, intTerm, intHomel, intAddl, intMath, intCh1, intCh2, intCh3);
                        } else
                        {
                            db.updateTermMark(user, intGrade, intTerm, intHomel, intAddl, intMath, intCh1, intCh2, intCh3);
                        }
                    }
                    race = getSelectedBtn().getText();//get race
                    //data to be updated to the db if there is a subject change
                    if (txfAL.getText().equals(""))
                    {
                        AL = 0;
                    } else//making sure a null string is not parsed into a int
                    {
                        AL = Integer.parseInt(txfAL.getText());
                    }
                    //Check QL
                    if (txfQL.getText().equals(""))
                    {
                        QL = 0;
                    } else
                    {
                        QL = Integer.parseInt(txfQL.getText());
                    }
                    //ckeck MAT
                    if (txfMAT.getText().equals(""))
                    {
                        MAT = 0;
                    } else
                    {
                        MAT = Integer.parseInt(txfMAT.getText());
                    }
                    db.updateStudentInfo(user, race, homel, addl, math, ch1, ch2, ch3, AL, QL, MAT);
                    //update will be executed evem if there is not subject change, however to validate if there is a change will require an SELECT starment which is not much more efficient than UPDATE
                    GUIManager.messageBox("<html><p align=\"center\">Successfully saved<br><br>To check your Personalised Programme list<br>please go back and click on the personalised programme button</html>");
                }
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void studentHelpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_studentHelpActionPerformed
    {//GEN-HEADEREND:event_studentHelpActionPerformed
        GUIManager.helpFrame("<html><p align=\"center\"><h2>This Program is only suited for NSC/IEB students<br>Some less common subjects may not be included<br><br>Currently This program only supports UCT, UP, Wits<br>and Stellenbosch<br></h2>"
                + "<ul><strong>Hot Keys <br></strong>Help page: <strong>Alt+H</strong><br>"
                + "<br><li>Please enter all the information, the message box will guide you through<br></li>"
                + "<li> You can decide to enter a Year mark or Term mark<br>both will work to formulate your personalised programme table<br></li>"
                + "<li> Check you marks allow you to quickly get you marks<br>provided that you select a specific term/year mark<br></li>"
                + "<li> NBT marks are optional however, <br>if not entered a lot of programmes will not<br> be on your Personalised Programme table<br><strong>Enter self-estimation is recommended<br></li>"
                + "</ul></html>");
    }//GEN-LAST:event_studentHelpActionPerformed

    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCheckActionPerformed
    {//GEN-HEADEREND:event_btnCheckActionPerformed
        //extract existing user data and push it to the ui
        String grade = (String) jcGrade.getSelectedItem();
        String term = (String) jcTerm.getSelectedItem();
        int intGrade, intTerm;
        if (grade == (null) && !jtMarks.isSelected())// year mark check empty
        {
            GUIManager.messageBox("<html><p align=\"center\">Please select the desired<br><strong>Grade</strong> to check your marks</html>");
        } else if ((grade == (null) || term == (null)) && jtMarks.isSelected())//Term mark check empty 
        {
            GUIManager.messageBox("<html><p align=\"center\">Please select the desired<br><strong>Grade and Term</strong>  to check your marks</html>");
        } else//after validation check if its year or term
        {
            intGrade = Integer.parseInt(grade);
            if (!jtMarks.isSelected())//data to be send to tblmarks YEAR Mark
            {
                try
                {
                    if (!db.isNewYearMark(user, intGrade))
                    {// uses objects to grab data from db
                        YearMark ym = db.populateYearMark(user, intGrade);
                        int homel = ym.getHomel();
                        int addl = ym.getAddl();
                        int math = ym.getMath();
                        int ch1 = ym.getCh1();
                        int ch2 = ym.getCh2();
                        int ch3 = ym.getCh3();
                        txfHomeL.setText(homel + "");
                        txfAddL.setText(addl + "");
                        txfMath.setText(math + "");
                        txfCh1.setText(ch1 + "");
                        txfCh2.setText(ch2 + "");
                        txfCh3.setText(ch3 + "");
                    } else
                    {
                        GUIManager.messageBox("<html><p align=\"center\">No mark have been entered for Grade " + intGrade + "<br><br>Please enter your marks before checking your marks</html>");
                    }
                } catch (SQLException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else // term mark
            {
                intTerm = Integer.parseInt(term);
                try
                {
                    if (!db.isNewTermMark(user, intGrade, intTerm))
                    {// uses objects to grab data from db
                        TermMark tm = db.populateTermMark(user, intGrade, intTerm);
                        int homel = tm.getHomel();
                        int addl = tm.getAddl();
                        int math = tm.getMath();
                        int ch1 = tm.getCh1();
                        int ch2 = tm.getCh2();
                        int ch3 = tm.getCh3();
                        txfHomeL.setText(homel + "");
                        txfAddL.setText(addl + "");
                        txfMath.setText(math + "");
                        txfCh1.setText(ch1 + "");
                        txfCh2.setText(ch2 + "");
                        txfCh3.setText(ch3 + "");
                    } else
                    {
                        GUIManager.messageBox("<html><p align=\"center\">No mark have been entered for Grade " + intGrade + " Term " + intTerm + "<br><br>Please enter your marks before checking your marks</html>");
                    }
                } catch (SQLException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnCheckActionPerformed

    private void logOffActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_logOffActionPerformed
    {//GEN-HEADEREND:event_logOffActionPerformed
        jpConfirmLogOut.setVisible(true);//confrim log off
        jpConfirmLogOut.requestFocus();
    }//GEN-LAST:event_logOffActionPerformed
//hover effects
    private void CloseMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_CloseMouseEntered
    {//GEN-HEADEREND:event_CloseMouseEntered
        Close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/close hover.png")));
    }//GEN-LAST:event_CloseMouseEntered

    private void CloseMouseExited(java.awt.event.MouseEvent evt)//GEN-FIRST:event_CloseMouseExited
    {//GEN-HEADEREND:event_CloseMouseExited
        Close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/northarrow/Images/close.png")));
    }//GEN-LAST:event_CloseMouseExited
//hover effects end. most hover effects now uses rollover icon
    private void CloseMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_CloseMouseReleased
    {//GEN-HEADEREND:event_CloseMouseReleased
        jpConfirmLogOut.setVisible(false);
    }//GEN-LAST:event_CloseMouseReleased

    private void confirmActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_confirmActionPerformed
    {//GEN-HEADEREND:event_confirmActionPerformed
        LoginFrame lf = new LoginFrame();//confirms log off
        dispose();//ends the main frame 
        lf.setVisible(true);// opens the main frame     
        lf.requestFocus();
    }//GEN-LAST:event_confirmActionPerformed

    private void progressHelpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_progressHelpActionPerformed
    {//GEN-HEADEREND:event_progressHelpActionPerformed
        GUIManager.helpFrame("<html><p align=\"center\"><h2>This Program is only suited for NSC/IEB students<br>Some less common subjects may not be included<br><br>Currently This program only supports UCT, UP, Wits<br>and Stellenbosch<br></h2>"
                + "<ul><strong>Hot Keys <br></strong>Help page: <strong>Alt+H</strong><br>"
                + "<br><li>Toggle the term mark/ year mark button or the subject button <br>to view the desired graph showing your academic progression<br></li>"
                + "<li> Hovering on the graph for a few second will display a precise value at that point.<br> Click and drag right an area will zoom into the graph and a click and drag left will reverse that.<br> Left click will give you more options to play with the graph.</li>"
                + "</ul></html>");
    }//GEN-LAST:event_progressHelpActionPerformed

    private void btnProgressActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnProgressActionPerformed
    {//GEN-HEADEREND:event_btnProgressActionPerformed
        try//code to access the Progress feature
        {
            if (db.isNewUser(user))
            {//restrict new user to access
                GUIManager.messageBox("<html><p align=\"center\">New users do not have access to this function yet<br><br>To access please fill in your information in<br><strong> Student Information</strong></html>");
            } else if (db.isThereNoTermMark(user))
            {//not wnough information   to use this feature
                GUIManager.messageBox("<html><p align=\"center\">Insufficient Term Marks information to form a Graph<br><br>Please fill in your Marks in<strong> Student Information</strong></html>");
            } else if (db.isThereNoYearMark(user))
            {
                GUIManager.messageBox("<html><p align=\"center\">Insufficient Year Marks information to form a Graph<br><br>Please fill in your Marks in<strong> Student Information</strong></html>");
            } else//passes checkes enters the tab
            {
                Back.setVisible(true);
                jpMain.setVisible(false);
                jpProgress.setVisible(true);
                try
                {
                    refreshChart();//refresh the chart to fit the newest user mark data
                } catch (SQLException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnProgressActionPerformed

    private void programmeHelpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_programmeHelpActionPerformed
    {//GEN-HEADEREND:event_programmeHelpActionPerformed
        GUIManager.helpFrame("<html><p align=\"center\"><h2>This Program is only suited for NSC/IEB students<br>Some less common subjects may not be included<br><br>Currently This program only supports UCT, UP, Wits<br>and Stellenbosch<br></h2>"
                + "<ul><strong>Hot Keys <br></strong>Help page: <strong>Alt+H</strong><br>"
                + "<br><li><strong>This table is only about 80% accurate as some<br> Programmes have other special requirements for admission</strong><br></li>"
                + "<li> After you find a Programme of interest, it is recommended<br> to go read the official Prospectus<br><strong>Do not tke the information here as gaurenteed</strong><br></li>"
                + "<li> This APS display here is only the <strong>Minimum</strong> APS needed, therefore <br> a likely APS  for admission will be about at least<br> 10-30 % higher<br></li>"
                + "<li>There are several setting you can use,<br> the NBT filter being a very useful tool<br> Activate them by clicking<strong> Apply</strong><br></li>"
                + "<li> UCT setting- Disadvantage factor is a APS boost factor for UCT,<br>A % from 0-10% (20% for UCT MBChB)<br> based on historically disadvantage race and previous school attended.<br>Black people have the highest disadvantage, followed by<br>coloured, indian, asian<br>Please take into account of the school attended, <br>the better the school the lower the disadvantage factor<br></li>"
                + "<li>A PR or Personal Report is for Student interested in UCT's MBChB a moark from 0-100<br></li>"
                + "<li> By clicking the <strong>Cloumn Header </strong>you can sort the column in <strong>alphabetical order</strong> ( ascending order for numbers )<br></li>"
                + "</ul></html>");
    }//GEN-LAST:event_programmeHelpActionPerformed

    private void jrProgressTermActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jrProgressTermActionPerformed
    {//GEN-HEADEREND:event_jrProgressTermActionPerformed
        try//refresh graph and reset graph title when a toggle is activated
        {
            this.refreshChart();
            graphTitle.setText("Progression of Average Term Marks");
        } catch (SQLException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jrProgressTermActionPerformed

    private void jrProgressYearActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jrProgressYearActionPerformed
    {//GEN-HEADEREND:event_jrProgressYearActionPerformed
        try//refresh graph and reset graph title when a toggle is activated
        {
            this.refreshChart();
            graphTitle.setText("Progression of Average Year Marks");
        } catch (SQLException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jrProgressYearActionPerformed

    private void jtMarksActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jtMarksActionPerformed
    {//GEN-HEADEREND:event_jtMarksActionPerformed
        if (jtMarks.isSelected())//set toggle text and visibility of the term combo box
        {
            jtMarks.setText("Term Mark");
            jcTerm.setVisible(true);
            lbTerm.setVisible(true);
        } else
        {
            jtMarks.setText("Year Mark");
            jcTerm.setVisible(false);
            lbTerm.setVisible(false);
        }
    }//GEN-LAST:event_jtMarksActionPerformed

    private void jrProgressCh3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jrProgressCh3ActionPerformed
    {//GEN-HEADEREND:event_jrProgressCh3ActionPerformed
        try//refresh graph and reset graph title when a toggle is activated
        {
            this.refreshChart();
            if (jrProgressYear.isSelected())
            {
                graphTitle.setText("Progression of Subject Choice 3 Language Year Marks");
            } else
            {
                graphTitle.setText("Progression of Subject Choice 3 Term Marks");
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jrProgressCh3ActionPerformed

    private void jrProgressHomeLActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jrProgressHomeLActionPerformed
    {//GEN-HEADEREND:event_jrProgressHomeLActionPerformed
        try//refresh graph and reset graph title when a toggle is activated
        {
            this.refreshChart();
            if (jrProgressYear.isSelected())
            {
                graphTitle.setText("Progression of Home Language Year Marks");
            } else
            {
                graphTitle.setText("Progression of Home Language Term Marks");
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jrProgressHomeLActionPerformed

    private void jrProgressAddLActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jrProgressAddLActionPerformed
    {//GEN-HEADEREND:event_jrProgressAddLActionPerformed
        try//refresh graph and reset graph title when a toggle is activated
        {
            this.refreshChart();
            if (jrProgressYear.isSelected())
            {
                graphTitle.setText("Progression of Additional Language Year Marks");
            } else
            {
                graphTitle.setText("Progression of Additional Language Term Marks");
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jrProgressAddLActionPerformed

    private void jrProgressMathActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jrProgressMathActionPerformed
    {//GEN-HEADEREND:event_jrProgressMathActionPerformed
        try//refresh graph and reset graph title when a toggle is activated
        {
            this.refreshChart();
            if (jrProgressYear.isSelected())
            {
                graphTitle.setText("Progression of Math Language Year Marks");
            } else
            {
                graphTitle.setText("Progression of Math Language Term Marks");
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jrProgressMathActionPerformed

    private void jrProgressCh1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jrProgressCh1ActionPerformed
    {//GEN-HEADEREND:event_jrProgressCh1ActionPerformed
        try//refresh graph and reset graph title when a toggle is activated
        {
            this.refreshChart();
            if (jrProgressYear.isSelected())
            {
                graphTitle.setText("Progression of Subject Choice 1 Language Year Marks");
            } else
            {
                graphTitle.setText("Progression of Subject Choice 1 Term Marks");
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jrProgressCh1ActionPerformed

    private void jrProgressCh2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jrProgressCh2ActionPerformed
    {//GEN-HEADEREND:event_jrProgressCh2ActionPerformed
        try//refresh graph and reset graph title when a toggle is activated
        {
            this.refreshChart();
            if (jrProgressYear.isSelected())
            {
                graphTitle.setText("Progression of Subject Choice 2 Language Year Marks");
            } else
            {
                graphTitle.setText("Progression of Subject Choice 2 Term Marks");
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jrProgressCh2ActionPerformed

    private void jrOverallActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jrOverallActionPerformed
    {//GEN-HEADEREND:event_jrOverallActionPerformed
        try//refresh graph and reset graph title when a toggle is activated
        {
            this.refreshChart();
            if (jrProgressYear.isSelected())
            {
                graphTitle.setText("Progression of Average Year Marks");
            } else
            {
                graphTitle.setText("Progression of Average Term Marks");
            }
        } catch (SQLException ex)
        {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jrOverallActionPerformed

    private void btnTableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnTableActionPerformed
    {//GEN-HEADEREND:event_btnTableActionPerformed
        if (txfDisad.getText().equals(""))
        {
            txfDisad.setText("0");
        }
        if (txfPR.getText().equals(""))
        {
            txfPR.setText("0");
        }//set the string to "0" to avoid parse int error. and 0 basically means the same as nothing in ths program
        DefaultTableModel model = (DefaultTableModel) tblProgramme.getModel();//get control of the table
        if (personal == false)//if its show all programme
        {
            if (!this.isUCTSettingsInRange())//data validation if number is in range
            {
                GUIManager.messageBox("<html><p align=\"center\">UCT Disadvantage Factor can only range from 0 to 10% (20% for UCT MBChB student)<br><br>PR is for UCT MBChB student a mark from 0 to 100</html>");
            } else//passes validation
            {
                try
                {//refresh the table
                    for (int i = model.getRowCount() - 1; i >= 0; i--)//remove all rows
                    {
                        model.removeRow(i);
                    }
                    displayAllProgrammes();//show all programmes
                } catch (SQLException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else//show personalized programme
        {
            if (!this.isUCTSettingsInRange())
            {
                GUIManager.messageBox("<html><p align=\"center\">UCT Disadvantage Factor can only range from 0 to 10% (20% for UCT MBChB student)<br><br>PR is for UCT MBChB student a mark from 0 to 100</html>");
            } else
            {
                try
                {//refresh table
                    for (int i = model.getRowCount() - 1; i >= 0; i--)//remove all rows
                    {
                        model.removeRow(i);
                    }
                    displayPersonalisedProgrammes();//show personalized programme
                } catch (SQLException ex)
                {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btnTableActionPerformed

    private void jtTableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jtTableActionPerformed
    {//GEN-HEADEREND:event_jtTableActionPerformed
        if (jtTable.isSelected())//show all programme
        {//toggle seting the PERSONAL switch declared at the top
            jtTable.setText("All Degree");
            personal = false;
        } else
        {
            jtTable.setText("Personalise");//show personalized
            personal = true;
        }
    }//GEN-LAST:event_jtTableActionPerformed

    private void txfSearchKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txfSearchKeyReleased
    {//GEN-HEADEREND:event_txfSearchKeyReleased
        DefaultTableModel model = (DefaultTableModel) tblProgramme.getModel();//search function with filters
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(model);
        tblProgramme.setRowSorter(sorter);
        sorter.setRowFilter(RowFilter.regexFilter("(?i)" + txfSearch.getText()));//play around with filters and case insensitive
        //apply a filter
    }//GEN-LAST:event_txfSearchKeyReleased

    private void jcFilterMATActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jcFilterMATActionPerformed
    {//GEN-HEADEREND:event_jcFilterMATActionPerformed
        if (this.jcFilterMAT.isSelected())
        {//setting the nbt switches declared at the top
            isMAT = true;
            this.jcFilterNo.setSelected(false);
            isNoMatter = false;
            this.jcFilterAQL.setSelected(true);
            isAQL = true;
        } else
        {
            isMAT = false;
        }
    }//GEN-LAST:event_jcFilterMATActionPerformed

    private void jcFilterNoActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jcFilterNoActionPerformed
    {//GEN-HEADEREND:event_jcFilterNoActionPerformed
        if (this.jcFilterNo.isSelected())
        {//setting the nbt switches declared at the top
            jcFilterMAT.setSelected(false);
            isMAT = false;
            jcFilterAQL.setSelected(false);
            isAQL = false;
            isNoMatter = true;
        } else
        {
            isNoMatter = false;
        }
    }//GEN-LAST:event_jcFilterNoActionPerformed

    private void jcFilterAQLActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jcFilterAQLActionPerformed
    {//GEN-HEADEREND:event_jcFilterAQLActionPerformed
        if (this.jcFilterAQL.isSelected())
        {//setting the nbt switches declared at the top
            isAQL = true;
            this.jcFilterNo.setSelected(false);
            isNoMatter = false;
        } else
        {
            isAQL = false;
        }
    }//GEN-LAST:event_jcFilterAQLActionPerformed

    private boolean isMarkInRange()
    {//check if marks are valid numbers//nothing like1000% is allowed
        boolean re = false;
        if (isInRange(txfHomeL.getText()) && isInRange(txfAddL.getText()) && isInRange(txfMath.getText()) && isInRange(txfCh1.getText()) && isInRange(txfCh2.getText()) && isInRange(txfCh3.getText()) && isInRange(txfAL.getText()) && isInRange(txfQL.getText()) && isInRange(txfMAT.getText()))
        {
            re = true;
        }
        return re;
    }

    private boolean isUCTSettingsInRange()
    {//a special range of 0-20% from uct
        boolean re = false;
        if (isInRange(txfDisad.getText(), 20) && this.isInRange(txfPR.getText()))
        {
            re = true;
        }
        return re;
    }

    private boolean isInRange(String inNum)
    {//a range checking of 0-100
        boolean re = false;
        int num = 0;
        if (inNum.equals(""))
        {
            num = 0;
        } else
        {
            num = Integer.parseInt(inNum);
        }

        if (0 <= num && num <= 100)
        {
            re = true;
        }
        return re;
    }
//overloaded to accomadate UCT for 0-20%

    private boolean isInRange(String inNum, int limit)
    {
        boolean re = false;
        int num = 0;
        if (inNum.equals(""))
        {
            num = 0;
        } else
        {
            num = Integer.parseInt(inNum);
        }

        if (0 <= num && num <= limit)
        {
            re = true;
        }
        return re;
    }
//validation of empty input

    private boolean isStudentMarkEmpty()
    {
        boolean re = false;
        if (txfHomeL.getText().equals("") || txfAddL.getText().equals("") || txfMath.getText().equals("") || txfCh1.getText().equals("") || txfCh2.getText().equals("") || txfCh3.getText().equals(""))
        {
            re = true;
        }
        return re;
    }
//get the selected race radio button

    private JRadioButton getSelectedBtn()
    {
        if (jrBlack.isSelected())
        {
            return jrBlack;
        } else if (jrColoured.isSelected())
        {
            return jrColoured;
        } else if (jrIndian.isSelected())
        {
            return jrIndian;
        } else if (jrAsian.isSelected())
        {
            return jrAsian;
        } else
        {
            return jrWhite;
        }
    }
//depending on the toggle that is on get the relative data for the graph

    private CategoryDataset getData() throws SQLException
    {//populate the data and grab the data then put it into the data base
        DefaultCategoryDataset data = new DefaultCategoryDataset();
        int count = 0;
        if (jrProgressTerm.isSelected() && jrOverall.isSelected())//term
        {//uses term obj arrays
            TermMark[] tm = db.populateAllTermMark(user);
            while (count < GUIManager.countObjects(tm))//avoide running out of index or getting data from a null object
            {//as long as there is still data
                data.addValue(tm[count].getAvg(), " Average Term Mark", "G" + tm[count].getGrade() + " T" + tm[count].getTerm());
                count++;//                                          get the above type of data
            }
        } else if (jrProgressYear.isSelected() && jrOverall.isSelected())//year
        {
            YearMark[] ym = db.populateAllYearMark(user);
            while (count < GUIManager.countObjects(ym))//avoide running out of index or getting data from a null object
            {//as long as there is still data                
                data.addValue(ym[count].getAvg(), "Average Year Mark", "Grade " + ym[count].getGrade());
                count++;//                                          get the above type of data
            }
        } else if (jrProgressYear.isSelected() && jrProgressHomeL.isSelected())//year
        {
            YearMark[] ym = db.populateAllYearMark(user);
            while (count < GUIManager.countObjects(ym))//avoide running out of index or getting data from a null object
            {//as long as there is still data                
                data.addValue(ym[count].getHomel(), "Home Language Year Mark", "Grade " + ym[count].getGrade());
                count++;//                                          get the above type of data
            }
        } else if (jrProgressYear.isSelected() && jrProgressAddL.isSelected())//year
        {
            YearMark[] ym = db.populateAllYearMark(user);
            while (count < GUIManager.countObjects(ym))//avoide running out of index or getting data from a null object
            {//as long as there is still data                
                data.addValue(ym[count].getAddl(), "Additional Language Year Mark", "Grade " + ym[count].getGrade());
                count++;//                                          get the above type of data
            }
        } else if (jrProgressYear.isSelected() && jrProgressMath.isSelected())//year
        {
            YearMark[] ym = db.populateAllYearMark(user);
            while (count < GUIManager.countObjects(ym))//avoide running out of index or getting data from a null object
            {//as long as there is still data                
                data.addValue(ym[count].getMath(), "Math Year Mark", "Grade " + ym[count].getGrade());
                count++;//                                          get the above type of data
            }
        } else if (jrProgressYear.isSelected() && jrProgressCh1.isSelected())//year
        {
            YearMark[] ym = db.populateAllYearMark(user);
            while (count < GUIManager.countObjects(ym))//avoide running out of index or getting data from a null object
            {//as long as there is still data                
                data.addValue(ym[count].getCh1(), "Subject Choice 1 Year Mark", "Grade " + ym[count].getGrade());
                count++;//                                          get the above type of data
            }
        } else if (jrProgressYear.isSelected() && jrProgressCh2.isSelected())//year
        {
            YearMark[] ym = db.populateAllYearMark(user);
            while (count < GUIManager.countObjects(ym))//avoide running out of index or getting data from a null object
            {//as long as there is still data                
                data.addValue(ym[count].getCh2(), "Subject Choice 2 Year Mark", "Grade " + ym[count].getGrade());
                count++;//                                          get the above type of data
            }
        } else if (jrProgressYear.isSelected() && jrProgressCh3.isSelected())//year
        {
            YearMark[] ym = db.populateAllYearMark(user);
            while (count < GUIManager.countObjects(ym))//avoide running out of index or getting data from a null object
            {//as long as there is still data                
                data.addValue(ym[count].getCh3(), "Subject Choice 3 Year Mark", "Grade " + ym[count].getGrade());
                count++;//                                          get the above type of data
            }
        } else if (jrProgressTerm.isSelected() && jrProgressHomeL.isSelected())//term
        {
            TermMark[] ym = db.populateAllTermMark(user);
            while (count < GUIManager.countObjects(ym))//avoide running out of index or getting data from a null object
            {//as long as there is still data                
                data.addValue(ym[count].getHomel(), "Home Language Term Mark", "G" + ym[count].getGrade() + " T" + ym[count].getTerm());
                count++;//                                          get the above type of data
            }
        } else if (jrProgressTerm.isSelected() && jrProgressAddL.isSelected())//term
        {
            TermMark[] ym = db.populateAllTermMark(user);
            while (count < GUIManager.countObjects(ym))//avoide running out of index or getting data from a null object
            {//as long as there is still data                
                data.addValue(ym[count].getAddl(), "Additional Language Term Mark", "G" + ym[count].getGrade() + " T" + ym[count].getTerm());
                count++;//                                          get the above type of data
            }
        } else if (jrProgressTerm.isSelected() && jrProgressMath.isSelected())//term
        {
            TermMark[] ym = db.populateAllTermMark(user);
            while (count < GUIManager.countObjects(ym))//avoide running out of index or getting data from a null object
            {//as long as there is still data                
                data.addValue(ym[count].getMath(), "Math Term Mark", "G" + ym[count].getGrade() + " T" + ym[count].getTerm());
                count++;//                                          get the above type of data
            }
        } else if (jrProgressTerm.isSelected() && jrProgressCh1.isSelected())//term
        {
            TermMark[] ym = db.populateAllTermMark(user);
            while (count < GUIManager.countObjects(ym))//avoide running out of index or getting data from a null object
            {//as long as there is still data                
                data.addValue(ym[count].getCh1(), "Subject Choice 1 Term Mark", "G" + ym[count].getGrade() + " T" + ym[count].getTerm());
                count++;//                                          get the above type of data
            }
        } else if (jrProgressTerm.isSelected() && jrProgressCh2.isSelected())//term
        {
            TermMark[] ym = db.populateAllTermMark(user);
            while (count < GUIManager.countObjects(ym))//avoide running out of index or getting data from a null object
            {//as long as there is still data                
                data.addValue(ym[count].getCh2(), "Subject Choice 2 Term Mark", "G" + ym[count].getGrade() + " T" + ym[count].getTerm());
                count++;//                                          get the above type of data
            }
        } else if (jrProgressTerm.isSelected() && jrProgressCh3.isSelected())//term
        {
            TermMark[] ym = db.populateAllTermMark(user);
            while (count < GUIManager.countObjects(ym))//avoide running out of index or getting data from a null object
            {//as long as there is still data                
                data.addValue(ym[count].getCh3(), "Subject Choice 3 Term Mark", "G" + ym[count].getGrade() + " T" + ym[count].getTerm());
                count++;//                                          get the above type of data....the thing we do for user experiences
            }
        }
        return data;
    }

    private void refreshChart() throws SQLException
    {
        jpChart.removeAll();
        jpChart.revalidate(); // This removes the old chart 
        chart = ChartFactory.createAreaChart(null, null, null, getData());
        chart.removeLegend();
        ChartPanel chartPanel = new ChartPanel(chart);
        //seting the area colour
        CategoryPlot plot = chart.getCategoryPlot();
        AreaRenderer renderer = (AreaRenderer) plot.getRenderer();
        Color color = new Color(0, 109, 240, 80);//set the colour of the area blue and semi tranparent
        renderer.setSeriesPaint(0, color);//inject the colour. it was red by ddefault...

        CategoryPlot y = chart.getCategoryPlot();
        ValueAxis yAxis = y.getRangeAxis();

        CategoryPlot x = chart.getCategoryPlot();
        CategoryAxis xAxis = x.getDomainAxis();

        yAxis.setRange(0.0, 100.0);//to set the y axis range from 0 to 100
        Font font = new Font("Segoe UI Semibold", Font.PLAIN, 14);
        yAxis.setTickLabelFont(font);
        xAxis.setTickLabelFont(font);

        chart.setBackgroundPaint(new Color(242, 242, 242));//set bg to the same colour as the mian bg colour
        jpChart.setLayout(new BorderLayout());//only borderlayout or box layout can display a graph
        jpChart.add(chartPanel, BorderLayout.CENTER);
        jpChart.repaint();// This method makes the new chart appear
        jpChart.validate();
    }

    private void displayAllProgrammes() throws SQLException
    {
        ResultSet rs = db.getAllProgramme();//get the reset set of all the programmes
        DefaultTableModel model = (DefaultTableModel) tblProgramme.getModel();
        //get control of the table
        Student s = db.populateStudent(user);//grab all data from student where everything is integrated into a student object
        String name;
        String uni;
        int years;
        String fac;
        int aps;
        int thisAL, thisQL, thisMAT;
        boolean inAQL, inMath;

        //to get user's APS, specific to uni
        int UCT_MBChB_FPS = WPS(s.getUCT_MBChB_FPS(Integer.parseInt(txfPR.getText())), txfDisad.getText());
        int UCT_HealthFPS = WPS(s.getUCT_HealthFPS(), txfDisad.getText());
        int UCT_ScienceFPS = WPS(s.getUCT_ScienceFPS(), txfDisad.getText());
        int UCT_normFPS = WPS(s.getUCT_normFPS(), txfDisad.getText());
        int UP = s.getNSC();
        int Stellen = s.getStellen();
        int Wits = s.getWits();

        while (rs.next())
        {// geting the data of a Programme ready, kind of like an object
            int my = 0;
            name = rs.getString("Programme");
            uni = rs.getString("University");
            years = rs.getInt("YearsOfStudy");
            fac = rs.getString("Faculty");
            aps = rs.getInt("MinAPS");
            thisAL = rs.getInt("MinAL");
            thisQL = rs.getInt("MinQL");
            thisMAT = rs.getInt("MinMAT");
            //assigning user APS according to uni/faculty
            if (uni.equals("UCT") && fac.equalsIgnoreCase("HEALTH SCIENCES") && name.equals("Bachelor of Medicine and Surgery (MBChB)"))
            {
                my = UCT_MBChB_FPS;
            } else if (uni.equals("UCT") && fac.equalsIgnoreCase("HEALTH SCIENCES"))
            {
                my = UCT_HealthFPS;
            } else if (uni.equals("UCT") && fac.equalsIgnoreCase("SCIENCE"))
            {
                my = UCT_ScienceFPS;
            }//            
            else if (uni.equals("UCT"))
            {
                my = UCT_normFPS;
            } else if (uni.equals("UP"))
            {
                my = UP;
            } else if (uni.equals("Stellenbosch"))
            {
                my = Stellen;
            } else if (uni.equals("Wits"))
            {
                my = Wits;
            }

            //get if the progeramme needs nbt to apply
            if (thisAL == 0 && thisQL == 0)//aql derived field
            {
                inAQL = false;
            } else
            {
                inAQL = true;
            }
            if (thisMAT == 0)//0 means no nbt
            {
                inMath = false;
            } else
            {
                inMath = true;
            }

            if (isNoMatter == true)//add when nbt filter is disabled, (it is by default)
            {
                model.addRow(new Object[]
                {//add the programme to the table
                    name, uni, years, fac, aps, my, inAQL, inMath
                });

            } else//when nbt filter is on
            {
                if ((isMAT == true) && (inMath == true) && (isAQL == true) && (inAQL == true))//only add when MAT and AQL is toggled
                {
                    model.addRow(new Object[]
                    {
                        name, uni, years, fac, aps, my, inAQL, inMath
                    });
                } else if ((isMAT == false) && (inMath == false) && (isAQL == false) && (inAQL == false))//only add when you dont need nbt
                {
                    model.addRow(new Object[]
                    {
                        name, uni, years, fac, aps, my, inAQL, inMath
                    });
                } else if ((isMAT == true) && (inMath == true) && (isAQL == false) && (inAQL == false))//only add when MAT is toggled
                {
                    model.addRow(new Object[]
                    {
                        name, uni, years, fac, aps, my, inAQL, inMath
                    });
                } else if ((isMAT == false) && (inMath == false) && (isAQL == true) && (inAQL == true))//only add when AQL is toggled
                {
                    model.addRow(new Object[]
                    {
                        name, uni, years, fac, aps, my, inAQL, inMath
                    });
                }
            }
        }
    }

    private int WPS(int FPS, String factor)//to modify user APS for UCT programmes
    {
        if (factor.equals(""))//avoid parse double an empty string
        {
            factor = "0";
        }
        double re = FPS;//disadvantage modifier
        double mod = 1 + (Double.parseDouble(factor) / 100);
        re *= mod;
        return (int) Math.round(re);//only whole numbers is used
    }

    private boolean witsHealth, checkEng, checkMathOrLit, checkMath, checkPhyOrLif, checkPhy, checkPhyAndLif, checkLif, checkMusic, checkAll, checkAL, checkQL, checkMAT, noUctMBChB;

    //switches, a range of switch customised to accomodate every programme
    private void switchBoard(String name, String uni, String faculty, int aps, int eng, int math, int mathLit, int phy, int lif, int music, int all, int al, int ql, int mat)
    {
        //to determine what checks needs to be implemented for each uni programme
        witsHealth = false;
        checkEng = false;
        checkMathOrLit = false;
        checkMath = false;
        checkPhyOrLif = false;
        checkPhy = false;
        checkPhyAndLif = false;
        checkLif = false;
        checkMusic = false;
        checkAll = false;
        checkAL = false;
        checkQL = false;
        checkMAT = false;
        noUctMBChB = false;

        if ((txfPR.getText().equals("0") && uni.equals("UCT") && (name.equalsIgnoreCase("Bachelor of Medicine and Surgery (MBChB)"))) || (txfPR.getText().equals("") && uni.equals("UCT") && (name.equalsIgnoreCase("Bachelor of Medicine and Surgery (MBChB)"))))
        {
            noUctMBChB = true;//no personal report then do not show uct MBChB degree
        }
        if (aps == -1)//annoying wits for not disclosing thier health faculty aps algorithm, so not to confuse this requireing 0 APS i entered -1 in the database
        {
            witsHealth = true;
        }

        //0 means that there is no requiremant
        if (eng != 0)//if there is a mark requirement basically
        {
            checkEng = true;
        }

        if (math != 0 && mathLit != 0)//a reoccuring thing for Universities MathOrLit
        {//all for the precision
            checkMathOrLit = true;//allow marks for both math subject to pass
        } else if (math != 0 && mathLit == 0)
        {
            checkMath = true;//only accept core math as a subject, else no requiremant for math
        }

        if (uni.equals("Stellenbosch") && (name.equalsIgnoreCase("Bachelor of Medicine and Surgery (MBChB)") || name.equalsIgnoreCase("Bachelor of Science in Physiotherapy (BSc)") || name.equalsIgnoreCase("Bachelor of Science in Dietetics (BSc)")))
        {
            checkPhyAndLif = true;//bloody exceptions that needs physics and lif sciecnce
        } else if (phy != 0 && lif != 0)//PhyOrLif
        {
            checkPhyOrLif = true;
        } else if (phy != 0 && lif == 0)//phy only
        {
            checkPhy = true;
        } else if (phy == 0 && lif != 0)
        {
            checkLif = true;
        }//else {just remain false, and no req needed}

        if (music != 0)//if there is a music subject requirement
        {
            checkMusic = true;
        }

        if (all != 0)//if there is a avgerge mark requirement
        {
            checkAll = true;
        }

        if (al != 0)//a minimum AL requirement
        {
            checkAL = true;
        }
        if (ql != 0)//a minimum QL requirement
        {
            checkQL = true;
        }
        if (mat != 0)//a minimum MAT requirement
        {
            checkMAT = true;
        }
        //if i ever update this, here is where i t add more switches to make result more precise 
    }

    private void displayPersonalisedProgrammes() throws SQLException
    {//almost the same code as ad all programmes, but instead of model.addrow i have a custom add row function
        ResultSet rs = db.getAllProgramme();
        DefaultTableModel model = (DefaultTableModel) tblProgramme.getModel();

        Student s = db.populateStudent(user);//grab all data from student where everything is integrated into a student object
        LatestMark mark = s.getLatestMark();
        String name, uni, fac;
        int years, aps, thisAL, thisQL, thisMAT, eng, math, mathLit, phy, lif, music, avg;
        boolean inAQL, inMath, execute;
        //to get user's APS, specific to uni
        int UCT_MBChB_FPS = WPS(s.getUCT_MBChB_FPS(Integer.parseInt(txfPR.getText())), txfDisad.getText());
        int UCT_HealthFPS = WPS(s.getUCT_HealthFPS(), txfDisad.getText());
        int UCT_ScienceFPS = WPS(s.getUCT_ScienceFPS(), txfDisad.getText());
        int UCT_normFPS = WPS(s.getUCT_normFPS(), txfDisad.getText());
        int UP = s.getNSC();
        int Stellen = s.getStellen();
        int Wits = s.getWits();
        while (rs.next())
        {// geting the record ready
            execute = true;//need to stay true to add row
            int my = 0;
            name = rs.getString("Programme");
            uni = rs.getString("University");
            years = rs.getInt("YearsOfStudy");
            fac = rs.getString("Faculty");
            aps = rs.getInt("MinAPS");
            thisAL = rs.getInt("MinAL");
            thisQL = rs.getInt("MinQL");
            thisMAT = rs.getInt("MinMAT");
            eng = rs.getInt("MinEng");
            math = rs.getInt("MinMath");
            mathLit = rs.getInt("MinMathLit");
            phy = rs.getInt("MinPhy");
            lif = rs.getInt("MinLif");
            music = rs.getInt("MinMusic");
            avg = rs.getInt("MinAll");

            if (uni.equals("UCT") && fac.equalsIgnoreCase("HEALTH SCIENCES") && name.equals("Bachelor of Medicine and Surgery (MBChB)"))
            {//to determine the specific aps the user have according to uni/programme
                my = UCT_MBChB_FPS;
            } else if (uni.equals("UCT") && fac.equalsIgnoreCase("HEALTH SCIENCES"))
            {
                my = UCT_HealthFPS;
            } else if (uni.equals("UCT") && fac.equalsIgnoreCase("SCIENCE"))
            {
                my = UCT_ScienceFPS;
            }//            
            else if (uni.equals("UCT"))
            {
                my = UCT_normFPS;
            } else if (uni.equals("UP"))
            {
                my = UP;
            } else if (uni.equals("Stellenbosch"))
            {
                my = Stellen;
            } else if (uni.equals("Wits"))
            {
                my = Wits;
            }
            if (thisAL == 0 && thisQL == 0)//aql derived field
            {
                inAQL = false;
            } else
            {
                inAQL = true;
            }
            if (thisMAT == 0)//0 means no nbt
            {
                inMath = false;
            } else
            {
                inMath = true;
            }
            if (isNoMatter == true)//add when disable nbt filter is on
            {//set of checks that needed to be passed to add a personalised row
                this.personalisedFilter(model, s, mark, name, uni, fac, years, aps, thisAL, thisQL, thisMAT, eng, math, mathLit, phy, lif, music, avg, my);
            } else//add when disable nbt filter is off
            {
                if ((isMAT == true) && (inMath == true) && (isAQL == true) && (inAQL == true))//omly add when mat is true
                {
                    this.personalisedFilter(model, s, mark, name, uni, fac, years, aps, thisAL, thisQL, thisMAT, eng, math, mathLit, phy, lif, music, avg, my);
                } else if ((isMAT == false) && (inMath == false) && (isAQL == false) && (inAQL == false))//omly add when mat is false
                {
                    this.personalisedFilter(model, s, mark, name, uni, fac, years, aps, thisAL, thisQL, thisMAT, eng, math, mathLit, phy, lif, music, avg, my);
                } else if ((isMAT == true) && (inMath == true) && (isAQL == false) && (inAQL == false))//omly add when mat is false
                {
                    this.personalisedFilter(model, s, mark, name, uni, fac, years, aps, thisAL, thisQL, thisMAT, eng, math, mathLit, phy, lif, music, avg, my);
                } else if ((isMAT == false) && (inMath == false) && (isAQL == true) && (inAQL == true))//omly add when mat is false
                {
                    this.personalisedFilter(model, s, mark, name, uni, fac, years, aps, thisAL, thisQL, thisMAT, eng, math, mathLit, phy, lif, music, avg, my);
                }
            }
        }
    }

    //if switch board if the best idea i have come up my self, this is the longest method i've written
    private void personalisedFilter(DefaultTableModel model, Student s, LatestMark mark, String name, String uni, String fac, int years, int aps, int thisAL, int thisQL, int thisMAT, int eng, int math, int mathLit, int phy, int lif, int music, int avg, int my) throws SQLException
    {
        boolean inAQL = false, inMath = false, execute;
        if (thisAL == 0 && thisQL == 0)//aql derived field, get if a programme need nbt or not
        {
            inAQL = false;
        } else
        {
            inAQL = true;
        }
        if (thisMAT == 0)//0 means no nbt
        {
            inMath = false;
        } else
        {
            inMath = true;
        }
        //most important switch
        execute = true;//need to stay true to add row
        // the idea was that the switch board will switch on some checkes depednding on specific programme there is and check it here.
        //for the programme to execute and make it on the table it needs to pass all the enabled checks by the switch board. staying true all the way thru.
        //hence the game: try and make me false :D
        this.switchBoard(name, uni, fac, aps, eng, math, mathLit, phy, lif, music, avg, thisAL, thisQL, thisMAT);

        if (aps > my)//first fundamental check
        {//requirement is higher than the APS you have
            execute = false;
        }

        if (witsHealth)//i eliminated the entire wits health faculty in personalised programme 
        {//cause they didn;t provide how much APS is needed at minimum, you can still see it in ALL programmes mode
            execute = false;
        }
        if (checkEng)
        {
            if (mark.getHomel() >= eng)//checking english mark
            {
                //keep execute unchanged
            } else
            {
                execute = false;
            }
        }
        //comp is comparison, basically means the required APS
        if (checkMathOrLit)
        {
            int comp;
            if (s.getMath().equals("Mathematics"))//identifing if the subject is math or math lit
            {//its math
                comp = math;// and assigning the requirement number
            } else//its math lit
            {
                comp = mathLit;
            }

            if (mark.getMath() >= comp)//needs to be more than required
            {
                //keep execute unchanged
            } else
            {
                execute = false;
            }
        }

        if (checkMath)//math only
        {
            if (s.getMath().equals("Math Literacy"))//killing all math lit in core math only mode
            {
                execute = false;
            }
            if (mark.getMath() > math)//checking math mark
            {
                //keep execute unchanged
            } else
            {
                execute = false;
            }
        }

        if (checkPhyOrLif)//phy or lif...
        {
            int comp = 0;
            int scienceMark = 0;
            boolean phyExist = false, lifExist = false, bothExist = false;
            String phypos = s.identifyPhysicalScience();//either 1, 2, 3 or 0 which mean does not exist
            String lifpos = s.identifyLifeScience();
            //there is 4 sernarios
            //no science subject
            //1 sicence phy or lif
            //both subjects
            if (phypos.equals("0") && lifpos.equals("0"))//check for existance
            {
                execute = false;
            } else
            {//determine which sernario
                if (!phypos.equals("0") && lifpos.equals("0"))//just physical science exist
                {
                    phyExist = true;
                } else if (phypos.equals("0") && !lifpos.equals("0"))//just life sc science exist
                {
                    lifExist = true;
                } else if (!phypos.equals("0") && !lifpos.equals("0"))
                {
                    bothExist = true;
                }

                if (phyExist)
                {
                    comp = phy;//get required aps 
                    switch (phypos)//get user physic aps
                    {//using position, THIS IS BECAUSE A CHOICE SUBJECT CAN BE IN 
                        //CHOICE ONE,TWO, THREE or NONE.
                        case "1":
                            if (s.getCh1().equals("Physical Sciences"))
                            {//its phy
                                scienceMark = mark.getCh1();
                            }
                            break;
                        case "2":
                            if (s.getCh2().equals("Physical Sciences"))
                            {//its phy
                                scienceMark = mark.getCh2();
                            }
                            break;
                        case "3":
                            if (s.getCh3().equals("Physical Sciences"))
                            {//its phy
                                scienceMark = mark.getCh3();
                            }
                            break;
                        default:
                            System.out.println("phy error");
                            break;
                    }
                } else if (lifExist)
                {
                    comp = lif;//get required aps
                    switch (lifpos)//get user lif aps
                    {
                        case "1":
                            if (s.getCh1().equals("Life Sciences"))
                            {//its lif
                                scienceMark = mark.getCh1();
                            }
                            break;
                        case "2":
                            if (s.getCh2().equals("Life Sciences"))
                            {//its lif
                                scienceMark = mark.getCh2();
                            }
                            break;
                        case "3":
                            if (s.getCh3().equals("Life Sciences"))
                            {//its lif
                                scienceMark = mark.getCh3();
                            }
                            break;
                        default:
                            System.out.println("Life error");
                            break;
                    }
                } else if (bothExist)
                {//the higher one wins
                    int phyMark = 0, lifMark = 0;
                    switch (phypos)//get user physic aps
                    {//using position
                        case "1":
                            if (s.getCh1().equals("Physical Sciences"))
                            {//its phy
                                phyMark = mark.getCh1();
                            }
                            break;
                        case "2":
                            if (s.getCh2().equals("Physical Sciences"))
                            {//its phy
                                phyMark = mark.getCh2();
                            }
                            break;
                        case "3":
                            if (s.getCh3().equals("Physical Sciences"))
                            {//its phy
                                phyMark = mark.getCh3();
                            }
                            break;
                        default:
                            System.out.println("phy error");
                            break;
                    }

                    switch (lifpos)//get user lif aps
                    {
                        case "1":
                            if (s.getCh1().equals("Life Sciences"))
                            {//its lif
                                lifMark = mark.getCh1();
                            }
                            break;
                        case "2":
                            if (s.getCh2().equals("Life Sciences"))
                            {//its lif
                                lifMark = mark.getCh2();
                            }
                            break;
                        case "3":
                            if (s.getCh3().equals("Life Sciences"))
                            {//its lif
                                lifMark = mark.getCh3();
                            }
                            break;
                        default:
                            System.out.println("Life error");
                            break;
                    }
                    if (phyMark >= lifMark)//higher mark is used for checking min requirement
                    {
                        scienceMark = phyMark;
                        comp = phy;
                    } else
                    {
                        scienceMark = lifMark;
                        comp = lif;
                    }
                }

                if (scienceMark >= comp)//checking req
                {
                    //keep execute unchanged
                } else
                {
                    execute = false;
                }
            }

        }

        if (checkPhy)//physics obly
        {
            int scienceMark = 0;
            String phypos = s.identifyPhysicalScience();
            if (phypos.equals("0"))//if there is no physics as a subject
            {
                execute = false;
            } else
            {
                switch (phypos)//get user physic aps
                {//using position
                    case "1":
                        if (s.getCh1().equals("Physical Sciences"))
                        {//its phy
                            scienceMark = mark.getCh1();
                        }
                        break;
                    case "2":
                        if (s.getCh2().equals("Physical Sciences"))
                        {//its phy
                            scienceMark = mark.getCh2();
                        }
                        break;
                    case "3":
                        if (s.getCh3().equals("Physical Sciences"))
                        {//its phy
                            scienceMark = mark.getCh3();
                        }
                        break;
                    default:
                        System.out.println("phy error");
                        break;
                }
                if (scienceMark >= phy)//check phy
                {
                    //keep execute unchanged
                } else
                {
                    execute = false;
                }
            }
        }

        if (checkPhyAndLif)//for the annoying exceptions at stellenbosch uni
        {
            int phyScienceMark = 0;
            String phypos = s.identifyPhysicalScience();
            int lifScienceMark = 0;
            String lifpos = s.identifyLifeScience();
            if (phypos.equals("0") || lifpos.equals("0"))//if there is no physics or lif as a subject, hence if it exists
            {
                execute = false;
            } else
            {

                switch (phypos)//get user physic aps
                {//using position
                    case "1":
                        if (s.getCh1().equals("Physical Sciences"))
                        {//its phy
                            phyScienceMark = mark.getCh1();
                        }
                        break;
                    case "2":
                        if (s.getCh2().equals("Physical Sciences"))
                        {//its phy
                            phyScienceMark = mark.getCh2();
                        }
                        break;
                    case "3":
                        if (s.getCh3().equals("Physical Sciences"))
                        {//its phy
                            phyScienceMark = mark.getCh3();
                        }
                        break;
                    default:
                        System.out.println("Physical error");
                        break;
                }//for lif science

                switch (lifpos)
                {
                    case "1":
                        if (s.getCh1().equals("Life Sciences"))
                        {//its lif
                            lifScienceMark = mark.getCh1();
                        }
                        break;
                    case "2":
                        if (s.getCh2().equals("Life Sciences"))
                        {//its lif
                            lifScienceMark = mark.getCh2();
                        }
                        break;
                    case "3":
                        if (s.getCh3().equals("Life Sciences"))
                        {//its lif
                            lifScienceMark = mark.getCh3();
                        }
                        break;
                    default:
                        System.out.println("Life error");
                        break;
                }
                if (phyScienceMark >= phy && lifScienceMark >= lif)// both marks needs to exist and be above req
                {//phy and lif both needs to be greater than the req
                    //keep execute unchanged                            
                } else
                {
                    execute = false;
                }
            }
        }

        if (checkLif)//only life science
        {
            int lifScienceMark = 0;
            String lifpos = s.identifyLifeScience();
            if (lifpos.equals("o"))
            {
                execute = false;
            } else
            {
                switch (lifpos)
                {
                    case "1":
                        if (s.getCh1().equals("Life Sciences"))
                        {//its lif
                            lifScienceMark = mark.getCh1();
                        }
                        break;
                    case "2":
                        if (s.getCh2().equals("Life Sciences"))
                        {//its lif
                            lifScienceMark = mark.getCh2();
                        }
                        break;
                    case "3":
                        if (s.getCh3().equals("Life Sciences"))
                        {//its lif
                            lifScienceMark = mark.getCh3();
                        }
                        break;
                    default:
                        System.out.println("lif error");
                        break;
                }
                if (lifScienceMark >= lif)//check life sciencnce req
                {
                    //keep execute unchanged
                } else
                {
                    execute = false;
                }
            }
        }

        if (checkMusic)//check music like phy and lif...as its a choice subject
        {
            int musicMark = 0;
            String pos = s.identifyMusic();//position of 
            if (pos.equals("0"))//if there is no physics as a subject
            {
                execute = false;
            } else
            {
                switch (pos)
                {
                    case "1"://checking the mark of music in relation to the position
                        if (s.getCh1().equals("Music"))
                        {
                            musicMark = mark.getCh1();
                        }
                        break;
                    case "2":
                        if (s.getCh2().equals("Music"))
                        {
                            musicMark = mark.getCh2();
                        }
                        break;
                    case "3":
                        if (s.getCh3().equals("Music"))
                        {
                            musicMark = mark.getCh3();
                        }
                        break;
                    default:
                        System.out.println("music error");
                        break;
                }
                if (musicMark >= music)
                {
                    //keep execute unchanged
                } else
                {
                    execute = false;
                }
            }
        }

        if (checkAll)//the average mark needs to be above the all subject requirement
        {
            if (mark.getAvg() > avg)
            {
                //keep execute unchanged
            } else
            {
                execute = false;
            }
        }

        if (checkAL)//minimum al requirement
        {
            if (s.getAL() > thisAL)
            {
                //keep execute unchanged
            } else
            {
                execute = false;
            }
        }

        if (checkQL)//minimum QL requirement
        {
            if (s.getQL() > thisQL)
            {
                //keep execute unchanged
            } else
            {
                execute = false;
            }
        }

        if (checkMAT)//minimum MAT requirement
        {
            if (s.getMAT() > thisMAT)
            {
                //keep execute unchanged
            } else
            {
                execute = false;
            }
        }
        //thic checks for UCT Personal Report -PR
        if (noUctMBChB)//if there is no Personal Report number entered, or it is 0% 
        {//then do not show UCT's MBChB
            execute = false;
        }

        if (execute)//if execute made it thru alive(true) add a row. bravo
        {
            model.addRow(new Object[]
            {
                name, uni, years, fac, aps, my, inAQL, inMath
            });
        }//else you are filtered

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JLabel Close;
    private javax.swing.JLabel DragBar;
    private javax.swing.JLabel Logo;
    private javax.swing.JLabel backGround;
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnProgrammes;
    private javax.swing.JButton btnProgress;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnStudentInfo;
    private javax.swing.JButton btnTable;
    private javax.swing.ButtonGroup btngProgress;
    private javax.swing.ButtonGroup btngRace;
    private javax.swing.ButtonGroup btngSubject;
    private javax.swing.JButton close;
    private javax.swing.JButton confirm;
    private javax.swing.JLabel decor;
    private javax.swing.JLabel graphTitle;
    private javax.swing.JLabel graphX;
    private javax.swing.JLabel graphY;
    private javax.swing.JScrollPane jScrollTable;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JSeparator jSeparatorNBT;
    private javax.swing.JSeparator jSeparatorProgress;
    private javax.swing.JSeparator jSeparatorTable;
    private javax.swing.JComboBox<String> jcAddL;
    private javax.swing.JComboBox<String> jcCh1;
    private javax.swing.JComboBox<String> jcCh2;
    private javax.swing.JComboBox<String> jcCh3;
    private javax.swing.JCheckBox jcFilterAQL;
    private javax.swing.JCheckBox jcFilterMAT;
    private javax.swing.JCheckBox jcFilterNo;
    private javax.swing.JComboBox<String> jcGrade;
    private javax.swing.JComboBox<String> jcHomeL;
    private javax.swing.JComboBox<String> jcMath;
    private javax.swing.JComboBox<String> jcTerm;
    private javax.swing.JPanel jpChart;
    private javax.swing.JPanel jpConfirmLogOut;
    private javax.swing.JPanel jpMain;
    private javax.swing.JPanel jpParent;
    private javax.swing.JPanel jpProgramme;
    private javax.swing.JPanel jpProgress;
    private javax.swing.JPanel jpStudent;
    private javax.swing.JRadioButton jrAsian;
    private javax.swing.JRadioButton jrBlack;
    private javax.swing.JRadioButton jrColoured;
    private javax.swing.JRadioButton jrIndian;
    private javax.swing.JRadioButton jrOverall;
    private javax.swing.JRadioButton jrProgressAddL;
    private javax.swing.JRadioButton jrProgressCh1;
    private javax.swing.JRadioButton jrProgressCh2;
    private javax.swing.JRadioButton jrProgressCh3;
    private javax.swing.JRadioButton jrProgressHomeL;
    private javax.swing.JRadioButton jrProgressMath;
    private javax.swing.JRadioButton jrProgressTerm;
    private javax.swing.JRadioButton jrProgressYear;
    private javax.swing.JRadioButton jrWhite;
    private javax.swing.JToggleButton jtMarks;
    private javax.swing.JToggleButton jtTable;
    private javax.swing.JLabel lbAL;
    private javax.swing.JLabel lbAddL;
    private javax.swing.JLabel lbCh1;
    private javax.swing.JLabel lbCh2;
    private javax.swing.JLabel lbCh3;
    private javax.swing.JLabel lbDisad;
    private javax.swing.JLabel lbDisclaimer;
    private javax.swing.JLabel lbFilterNBT;
    private javax.swing.JLabel lbGrade;
    private javax.swing.JLabel lbHomeL;
    private javax.swing.JLabel lbMAT;
    private javax.swing.JLabel lbMath;
    private javax.swing.JLabel lbMoreInfo;
    private javax.swing.JLabel lbMoreInfo1;
    private javax.swing.JLabel lbNBT;
    private javax.swing.JLabel lbPR;
    private javax.swing.JLabel lbProgrammeTitle;
    private javax.swing.JLabel lbProgressTitle;
    private javax.swing.JLabel lbQL;
    private javax.swing.JLabel lbRace;
    private javax.swing.JLabel lbSearch;
    private javax.swing.JLabel lbStudentTitle;
    private javax.swing.JLabel lbSubjects;
    private javax.swing.JLabel lbTableSettings;
    private javax.swing.JLabel lbTerm;
    private javax.swing.JLabel lbUCT;
    private javax.swing.JButton logOff;
    private javax.swing.JButton mainHelp;
    private javax.swing.JButton minimize;
    private javax.swing.JLabel minorBG;
    private javax.swing.JLabel percAL;
    private javax.swing.JLabel percAddL;
    private javax.swing.JLabel percCh1;
    private javax.swing.JLabel percCh2;
    private javax.swing.JLabel percCh3;
    private javax.swing.JLabel percDisad;
    private javax.swing.JLabel percHomeL;
    private javax.swing.JLabel percMAT;
    private javax.swing.JLabel percMath;
    private javax.swing.JLabel percPR;
    private javax.swing.JLabel percQL;
    private javax.swing.JButton programmeHelp;
    private javax.swing.JLabel programmeTitleIcon;
    private javax.swing.JButton progressHelp;
    private javax.swing.JLabel progressTitleIcon;
    private javax.swing.JLabel studenTtitleIcon;
    private javax.swing.JButton studentHelp;
    private javax.swing.JTable tblProgramme;
    private javax.swing.JLabel title;
    private javax.swing.JFormattedTextField txfAL;
    private javax.swing.JFormattedTextField txfAddL;
    private javax.swing.JFormattedTextField txfCh1;
    private javax.swing.JFormattedTextField txfCh2;
    private javax.swing.JFormattedTextField txfCh3;
    private javax.swing.JFormattedTextField txfDisad;
    private javax.swing.JFormattedTextField txfHomeL;
    private javax.swing.JFormattedTextField txfMAT;
    private javax.swing.JFormattedTextField txfMath;
    private javax.swing.JFormattedTextField txfPR;
    private javax.swing.JFormattedTextField txfQL;
    private javax.swing.JTextField txfSearch;
    // End of variables declaration//GEN-END:variables
}
